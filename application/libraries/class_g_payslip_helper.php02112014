<?php
/*
	$e = Employee_Factory::get(3);
	$ps = $e->getPayslip('2011-02-06', '2011-02-20');
	$ph = new Payslip_Helper($ps);
	echo $ph->getLabel('prepared_by') .'='. $ph->getValue('prepared_by');
*/

class G_Payslip_Helper {
	protected $payslip; // Instance of Payslip Class
	protected $labels;
	protected $earnings;
	protected $deductions;
	
	public function __construct($payslip) {
		$this->payslip = $payslip;		
		$this->arrangeLabels();
	}
	
	public function getLabel($variable) {
		$variable = strtolower($variable);
		return $this->labels[$variable]['label'];	
	}
	
	public function getValue($variable) {
		$variable = strtolower($variable);
		return $this->labels[$variable]['value'];	
	}
	
	public function getSubValue($variable) {
		$variable = strtolower($variable);
		echo $this->payslip['taxable']['value'];
		return $this->labels[$variable];	
	}
	
	public function computeTotalDeductions($deduction_type = '') {
		$temp_deductions = (is_array($this->payslip->getDeductions())) ? $this->payslip->getDeductions() : array() ;
		$temp_other_deductions = (is_array($this->payslip->getOtherDeductions())) ? $this->payslip->getOtherDeductions() : array() ;	
		
		$deductions = array_merge($temp_deductions, $temp_other_deductions);
		foreach ($deductions as $d) {
			if (is_object($d)) {
				if (!empty($deduction_type)) {
					if ($d->getDeductionType() == $deduction_type) {
						$array[$d->getLabel()] = $d->getAmount();
					}
				} else {
					$array[$d->getLabel()] = $d->getAmount();
				}
			}			
		}
		return Tools::numberFormat(array_sum($array));
	}
	
	public function computeTotalEarnings($earning_type = '') {
		$temp_earnings = (is_array($this->payslip->getEarnings())) ? $this->payslip->getEarnings() : array() ;
		$temp_other_earnings = (is_array($this->payslip->getOtherEarnings())) ? $this->payslip->getOtherEarnings() : array() ;
		
		$earnings = array_merge($temp_earnings, $temp_other_earnings);
		
		foreach ($earnings as $er) {
			if (is_object($er)) {
				if (!empty($earning_type)) {
					if ($er->getEarningType() == $earning_type) {
						$array_earnings[$er->getLabel()] = $er->getAmount();
					}
				} else {
					$array_earnings[$er->getLabel()] = $er->getAmount();
				}
			}
		}
		return Tools::numberFormat(array_sum($array_earnings));
	}		
	
	private function arrangeLabels() {
		if (is_object($this->payslip)) {
			$labels = $this->payslip->getLabels();			
			foreach ($labels as $l) {
				if (is_object($l)) {
					$variable = strtolower($l->getVariable());
					$this->labels[$variable]['label'] = $l->getLabel();
					$this->labels[$variable]['value'] = $l->getValue();
				}
			}
				
			$earnings = $this->payslip->getAllEarnings();	
			foreach ($earnings as $e) {
				if (is_object($e)) {
					$variable = strtolower($e->getVariable());
					$this->labels[$variable]['label'] = $e->getLabel();
					$this->labels[$variable]['value'] = $e->getAmount();
				}
			}
			
			$deductions = $this->payslip->getAllDeductions();			
			foreach ($deductions as $d) {
				if (is_object($d)) {
					$variable = strtolower($d->getVariable());
					$this->labels[$variable]['label'] = $d->getLabel();
					$this->labels[$variable]['value'] = $d->getAmount();
				}
			}
		}	
	}
	
	public static function countByEmployeeAndPeriod(IEmployee $employee, $start_date, $end_date) {
		$sql = "
			SELECT count(*) as total
			FROM g_employee_payslip
			WHERE employee_id = ". Model::safeSql($employee->getId()) ."
			AND (period_start = ". Model::safeSql($start_date) ." AND period_end = ". Model::safeSql($end_date) .")
			LIMIT 1			
		";
		$result = Model::runSql($sql);
		$row = Model::fetchAssoc($result);
		return $row['total'];
	}
	
	public static function countPeriod($start_date, $end_date) {
		$sql = "
			SELECT count(*) as total
			FROM g_employee_payslip
			WHERE (period_start = ". Model::safeSql($start_date) ." AND period_end = ". Model::safeSql($end_date) .")
			LIMIT 1		
		";
		$result = Model::runSql($sql);
		$row = Model::fetchAssoc($result);
		return $row['total'];	
	}
	
	public static function getExistingPeriod() {
		$sql = "
			SELECT p.period_start, p.period_end
			FROM g_employee_payslip p
			GROUP BY p.period_start, p.period_end
			ORDER BY p.period_start DESC
		";
		$result = Model::runSql($sql);
		$counter = 0;
		while ($row = Model::fetchAssoc($result)) {
			$return[$counter]['start'] = $row['period_start'];
			$return[$counter]['end'] = $row['period_end'];
			$counter++;
		}
		return $return;
	}
	
	public static function getPeriods() {
		$sql = "
			SELECT p.id, p.period_start, p.period_end, p.payout_date, is_lock
			FROM g_cutoff_period p
			GROUP BY p.period_start, p.period_end
			ORDER BY p.period_start DESC
		";
		$result = Model::runSql($sql);
		$counter = 0;
		while ($row = Model::fetchAssoc($result)) {
			$return[$counter]['id']      = $row['id'];
			$return[$counter]['start']   = $row['period_start'];
			$return[$counter]['end']     = $row['period_end'];
			$return[$counter]['is_lock'] = $row['is_lock'];
			$counter++;
		}
		return $return;
	}
	
	public static function getPayrollPeriodsByYearTag($year_tag) {
		$sql = "
			SELECT p.id, p.period_start, p.period_end, p.payout_date, is_lock
			FROM g_cutoff_period p
			WHERE p.year_tag =" . Model::safeSql($year_tag) . "
			GROUP BY p.period_start, p.period_end
			ORDER BY p.period_start DESC
		";
		$result = Model::runSql($sql);
		$counter = 0;
		while ($row = Model::fetchAssoc($result)) {
			$return[$counter]['id']      = $row['id'];
			$return[$counter]['start']   = $row['period_start'];
			$return[$counter]['end']     = $row['period_end'];
			$return[$counter]['is_lock'] = $row['is_lock'];
			$counter++;
		}
		return $return;
	}
	
	public static function getPeriodPayoutDate($from, $to) {
		$sql = "
			SELECT p.payout_date
			FROM g_cutoff_period p
			WHERE period_start = ". Model::safeSql($from) ."
			AND period_end = ". Model::safeSql($to) ."
			LIMIT 1
		";
		$result = Model::runSql($sql);
		$row = Model::fetchAssoc($result);
		return $row['payout_date'];
	}
	
	public static function updatePayslip(IEmployee $e, $start_date, $end_date) {
		$p = self::generatePayslip($e, $start_date, $end_date);
		return $p->save();
	}
	
	public static function updatePayslipByEmployeeAndDate($e, $date) {
		$c = G_Cutoff_Period_Finder::findByDate($date);
		if ($c) {
			$start_date = $c->getStartDate();	
			$end_date = $c->getEndDate();
			$ps = self::generatePayslip($e, $start_date, $end_date);	
			return $ps->save();			
		}		
	}	
	
	public static function updatePayslipIfExistByEmployeeAndDate($e, $date) {
		$c = G_Cutoff_Period_Finder::findByDate($date);
		if ($c) {
			$start_date = $c->getStartDate();	
			$end_date = $c->getEndDate();			
			$p = G_Payslip_Finder::findByEmployeeAndPeriod($e, $start_date, $end_date);
			if ($p) {
				$ps = self::generatePayslip($e, $start_date, $end_date);	
				return $ps->save();			
			}
		}		
	}
	
	public static function updatePayslipsByPeriod($start_date, $end_date) {
		$c = G_Cutoff_Period_Finder::findByPeriod($start_date, $end_date);				
		$employees = G_Employee_Finder::findAllActiveByDate($start_date);
		foreach ($employees as $id => $e) {
			$p = G_Payslip_Helper::generatePayslip($e, $start_date, $end_date);
			if ($p) {
				if ($c) {
					$payout_date = $c->getPayoutDate();	
					$p->setPayoutDate($payout_date);
				}
				$p->save();
				//Add Earnings
					$ea = G_Employee_Earnings_Helper::addEarningsToPayslip($e,$start_date,$end_date);					
				//
				
				//Add Deductions
					$de = G_Employee_Deductions_Helper::addDeductionsToPayslip($e,$start_date,$end_date);					
				//
				
				//Add Benefits
					$period['start_date'] = $start_date;
					$period['end_date']   = $end_date;	
									
					$be = new G_Employee_Benefit();	
					$be->addToPayslip($e,$period);
				//
				
				//Add Loans
					$loans = G_Employee_Loan_Helper::addLoansToPaySlip($e,$start_date,$end_date);
				//
			}
		}
						
	}	
	
	// DEPRECATED
	public static function generatePayslipsByPeriod($start_date, $end_date) {
		$employees = G_Employee_Finder::findAllActiveByDate($start_date);
		foreach ($employees as $id => $e) {
			$p = G_Payslip_Helper::generatePayslip($e, $start_date, $end_date);
			if ($p) {
				$p->save();
			} else {
				continue;	
			}
		}		
	}
	
	public static function generatePayslip(IEmployee $e, $start_date, $end_date) {
        G_Attendance_Helper::finalizeAttendance($e, $start_date, $end_date);

		$p = G_Payslip_Finder::findByEmployeeAndPeriod($e, $start_date, $end_date);
		if (!$p) {
			$p = new G_Payslip;
		}		
		$p->setPeriod($start_date, $end_date);
		$p->setEmployee($e);
		
		$a = G_Attendance_Finder::findByEmployeeAndPeriod($e, $start_date, $end_date);
		if (!$a) {
			/*$error = new G_Payslip_Error;
			$error->setMessage($e->getEmployeeCode() .': '. $e->getName() .' has no attendance');
			$error->setEmployeeId($e->getId());
			$error->setErrorTypeId(G_Payslip_Error::ERROR_NO_ATTENDANCE);
			$error->setDateLogged(Tools::getGmtDate('Y-m-d'));
			$error->setTimeLogged(Tools::getGmtDate('H:i:s'));
			$error->addError();*/
            return false;
		}
				
		//$is_first_period = false;
		//if (date('j', strtotime($end_date)) == 15) {
			$is_first_period = true;
		//}
		
		$hour = G_Payslip_Hour_Finder::findByAttendanceFinder($a);
		$rate = G_Payslip_Percentage_Rate_Finder::findDefault();

		$s = G_Employee_Basic_Salary_History_Finder::findByEmployeeAndDate($e, $end_date);		
		if (!$s) {
			$s = new G_Employee_Basic_Salary_History;
			$s->setBasicSalary(0);
		
			/*$error = new G_Payslip_Error;
			$error->setMessage($e->getEmployeeCode() .': '. $e->getName() .' has no salary record');
			$error->setEmployeeId($e->getId());
			$error->setErrorTypeId(G_Payslip_Error::ERROR_NO_SALARY);
			$error->setDateLogged(Tools::getGmtDate('Y-m-d'));
			$error->setTimeLogged(Tools::getGmtDate('H:i:s'));
			$error->addError();*/
		}

		$position = G_Employee_Job_History_Finder::findByEmployeeAndDate($e, $end_date);
		if ($position) {
			$position_name = $position->getName();
			$labels[] = new Payslip_Label('Position', $position_name, 'position');
		}
		$salary_amount = $s->getBasicSalary();
		$salary_type = $s->getType();
		
		$c = Payslip_Amount_Calculator_Factory::get();
		$c->setPayslipHour($hour);
		$c->setPayslipRate($rate);	
		
		switch ($salary_type):
			case G_Employee_Basic_Salary_History::SALARY_TYPE_MONTHLY:
				$c->setSalaryPerMonthAmount($salary_amount);
					$labels[] = new Payslip_Label('Monthly Rate', $salary_amount, 'monthly_rate');
					
				$per_day = $salary_amount / 26.17;
				$c->setSalaryPerDayAmount($per_day);
					$labels[] = new Payslip_Label('Daily Rate', $per_day, 'daily_rate');
					
				$per_hour = $per_day / 8;
				$c->setSalaryPerHourAmount($per_hour);
					$labels[] = new Payslip_Label('Hourly Rate', $per_hour, 'hourly_rate');
			break;
			case G_Employee_Basic_Salary_History::SALARY_TYPE_DAILY:
				$c->setSalaryPerMonthAmount(0);
				
				$c->setSalaryPerDayAmount($salary_amount);
					$labels[] = new Payslip_Label('Daily Rate', $salary_amount, 'daily_rate');
					
				$per_hour = $salary_amount / 8;
				$c->setSalaryPerHourAmount($per_hour);
					$labels[] = new Payslip_Label('Hourly Rate', $per_hour, 'hourly_rate');
			break;
//			case G_Employee_Basic_Salary_History::SALARY_TYPE_HOURLY:
//				$c->setSalaryPerMonthAmount(0);
//				$c->setSalaryPerDayAmount(0);
//				$c->setSalaryPerHourAmount($salary_amount);
//			break;			
		endswitch;
		$present_days = G_Attendance_Helper::countPresentDays($a);
			$labels[] = new Payslip_Label('Present Days', $present_days, 'present_days');
		$present_days_with_pay = G_Attendance_Helper::countPresentDaysWithPay($a);
			$labels[] = new Payslip_Label('Present Days with Pay', $present_days_with_pay, 'present_days_with_pay');
		//$absent_days_with_pay = G_Attendance_Helper::countAbsentDaysWithPay($a);
		//	$labels[] = new Payslip_Label('Absent Days with Pay', $absent_days_with_pay, 'absent_days_with_pay');
        //$ob_days = G_Attendance_Helper::countOBDays($a);
        //    $labels[] = new Payslip_Label('OB Days', $ob_days, 'ob_days');
		$absent_days_without_pay = G_Attendance_Helper::countAbsentDaysWithoutPay($a);
			$labels[] = new Payslip_Label('Absent Days without Pay', $absent_days_without_pay, 'absent_days_without_pay');
		$absent_amount = $c->computeAbsent($absent_days_without_pay);
			$labels[] = new Payslip_Label('Absent Amount without Pay', $absent_amount, 'absent_amount');
		$suspended_days = G_Attendance_Helper::countSuspendedDays($a);
			$labels[] = new Payslip_Label('Suspended Days', $suspended_days, 'suspended_days');
		$suspended_amount = $c->computeSuspension($suspended_days);
			$labels[] = new Payslip_Label('Suspended Amount', $suspended_amount, 'suspended_amount');				
		$undertime_hours = $hour->getRegularUndertime();
			$labels[] = new Payslip_Label('Undertime Hours', $undertime_hours, 'undertime_hours');
		$undertime_amount = $c->computeRegularUndertime();
			$labels[] = new Payslip_Label('Undertime Amount', $undertime_amount, 'undertime_amount');
		$late_hours = $hour->getRegularLate();
			$labels[] = new Payslip_Label('Late Hours', $late_hours, 'late_hours');					
		$late_amount = $c->computeRegularLate();
			$labels[] = new Payslip_Label('Late Amount', $late_amount, 'late_amount');									
		
		// REGULAR
		//$regular_hours = $hour->getRegular();
		//	$labels[] = new Payslip_Label('Regular Hours', $regular_hours, 'regular_hours');
		//$regular_amount = $c->computeRegular();
		//	$labels[] = new Payslip_Label('Regular Amount', $regular_amount, 'regular_amount');
		$regular_ot_hours = G_Attendance_Helper::getTotalOvertimeHours($a);
			$labels[] = new Payslip_Label('Regular OT Hours', $regular_ot_hours, 'regular_ot_hours');
		$regular_ot_amount = G_Payslip_Helper::computeRegularOvertimeAmount($a, $rate, $per_day, $per_hour);//$c->computeRegularOvertime();
			$labels[] = new Payslip_Label('Regular OT Amount', $regular_ot_amount, 'regular_ot_amount');
		$regular_ot_hours_excess = $hour->getRegularOvertimeExcess();
		//	$labels[] = new Payslip_Label('Regular OT Excess Hours', $regular_ot_hours_excess, 'regular_ot_hours_excess');
		//$regular_ot_amount_excess = $c->computeRegularOvertimeExcess();
		//	$labels[] = new Payslip_Label('Regular OT Excess Amount', $regular_ot_amount_excess, 'regular_ot_amount_excess');
		//$regular_ns_hours = $hour->getRegularNightShift();
		//	$labels[] = new Payslip_Label('Regular NS Hours', $regular_ns_hours, 'regular_ns_hours');
		//$regular_ns_amount = $c->computeRegularNightShift();
		//	$labels[] = new Payslip_Label('Regular NS Amount', $regular_ns_amount, 'regular_ns_amount');
		$regular_ns_ot_hours = G_Attendance_Helper::getTotalNightShiftOvertimeHours($a);
			$labels[] = new Payslip_Label('Regular NS OT Hours', $regular_ns_ot_hours, 'regular_ns_ot_hours');
		$regular_ns_ot_amount = G_Payslip_Helper::computeRegularOvertimeNightShiftAmount($a, $rate, $per_day, $per_hour);
			$labels[] = new Payslip_Label('Regular NS OT Amount', $regular_ns_ot_amount, 'regular_ns_ot_amount');
		//$regular_ns_ot_hours_excess = $hour->getNightShiftOvertimeExcess();
		//	$labels[] = new Payslip_Label('Regular NS OT Excess Hours', $regular_ns_ot_hours_excess, 'regular_ns_ot_hours_excess');
		//$regular_ns_ot_amount_excess = $c->computeNightShiftOvertimeExcess();
		//	$labels[] = new Payslip_Label('Regular NS OT Excess Amount', $regular_ns_ot_amount_excess, 'regular_ns_ot_amount_excess');
					
		// RESTDAY
		$restday_hours = G_Attendance_Helper::getTotalRestDayHours($a);//$hour->getRestDay();
			$labels[] = new Payslip_Label('Restday Hours', $restday_hours, 'restday_hours');
		$restday_amount = G_Payslip_Helper::computeRestDayAmount($a, $rate, $per_day, $per_hour);//$c->computeRestDay();
			$labels[] = new Payslip_Label('Restday Amount', $restday_amount, 'restday_amount');
		$restday_ot_hours = G_Attendance_Helper::getTotalRestDayOvertimeHours($a);//$hour->getRestDayOvertime();
			$labels[] = new Payslip_Label('Restday OT Hours', $restday_ot_hours, 'restday_ot_hours');
		$restday_ot_amount = G_Payslip_Helper::computeRestDayOvertimeAmount($a, $rate, $per_day, $per_hour);
			$labels[] = new Payslip_Label('Restday OT Amount', $restday_ot_amount, 'restday_ot_amount');
		//$restday_ot_hours_excess = $hour->getRestDayOvertimeExcess();
		//	$labels[] = new Payslip_Label('Restday OT Excess Hours', $restday_ot_hours_excess, 'restday_ot_hours_excess');
		//$restday_ot_amount_excess = $c->computeRestDayOvertimeExcess();
		//	$labels[] = new Payslip_Label('Restday OT Excess Amount', $restday_ot_amount_excess, 'restday_ot_amount_excess');
		//$restday_ns_hours = $hour->getRestdayNightShift();
		//	$labels[] = new Payslip_Label('Restday NS Hours', $restday_ns_hours, 'restday_ns_hours');
		//$restday_ns_amount = $c->computeRestDayNightShift();
		//	$labels[] = new Payslip_Label('Restday NS Amount', $restday_ns_amount, 'restday_ns_amount');
		$restday_ns_ot_hours = G_Attendance_Helper::getTotalRestDayNightShiftOvertimeHours($a);
			$labels[] = new Payslip_Label('Restday NS OT Hours', $restday_ns_ot_hours, 'restday_ns_ot_hours');
		$restday_ns_ot_amount = G_Payslip_Helper::computeRestDayOvertimeNightShiftAmount($a, $rate, $per_day, $per_hour);//$c->computeRestDayNightShiftOvertime();
			$labels[] = new Payslip_Label('Restday NS OT Amount', $restday_ns_ot_amount, 'restday_ns_ot_amount');
		//$restday_ns_ot_hours_excess = $hour->getRestDayNightShiftOvertimeExcess();
		//	$labels[] = new Payslip_Label('Restday NS OT Excess Hours', $restday_ns_ot_hours_excess, 'restday_ns_ot_hours_excess');
		//$restday_ns_ot_amount_excess = $c->computeRestDayNightShiftOvertimeExcess();
		//	$labels[] = new Payslip_Label('Restday NS OT Excess Amount', $restday_ns_ot_amount_excess, 'restday_ns_ot_amount_excess');

        $restday_special_hours = G_Attendance_Helper::getTotalHolidaySpecialRestdayHours($a);
            $labels[] = new Payslip_Label('Rest Day Special Hours', $restday_special_hours, 'restday_special_hours');
        $restday_special_amount = G_Payslip_Helper::computeRestDaySpecialAmount($a, $rate, $per_day, $per_hour);
            $labels[] = new Payslip_Label('Rest Day Special Amount', $restday_special_amount, 'restday_special_amount');
        $restday_special_ot_hours = G_Attendance_Helper::getTotalHolidaySpecialRestdayOvertimeHours($a);
        	$labels[] = new Payslip_Label('Rest Day Special OT Hours', $restday_special_ot_hours, 'restday_special_ot_hours');
        $restday_special_ot_amount = G_Payslip_Helper::computeRestDaySpecialOvertimeAmount($a, $rate, $per_day, $per_hour);
        	$labels[] = new Payslip_Label('Rest Day Special OT Amount', $restday_special_ot_amount, 'restday_special_ot_amount');
        $restday_special_ns_ot_hours = G_Attendance_Helper::getTotalHolidaySpecialRestDayNightShiftOvertimeHours($a);
            $labels[] = new Payslip_Label('Rest Day Special NS OT Hours', $restday_special_ns_ot_hours, 'restday_special_ns_ot_hours');
        $restday_special_ns_ot_amount = G_Payslip_Helper::computeRestDaySpecialOvertimeNightShiftAmount($a, $rate, $per_day, $per_hour);
            $labels[] = new Payslip_Label('Rest Day Special NS OT Amount', $restday_special_ns_ot_amount, 'restday_special_ns_ot_amount');

        $restday_legal_hours = G_Attendance_Helper::getTotalHolidayLegalRestdayHours($a);
            $labels[] = new Payslip_Label('Rest Day Legal Hours', $restday_legal_hours, 'restday_legal_hours');
        $restday_legal_amount = G_Payslip_Helper::computeRestDayLegalAmount($a, $rate, $per_day, $per_hour);
            $labels[] = new Payslip_Label('Rest Day Legal Amount', $restday_legal_amount, 'restday_legal_amount');
        $restday_legal_ot_hours = G_Attendance_Helper::getTotalHolidayLegalRestdayOvertimeHours($a);
            $labels[] = new Payslip_Label('Rest Day Legal OT Hours', $restday_legal_ot_hours, 'restday_legal_ot_hours');
        $restday_legal_ot_amount = G_Payslip_Helper::computeRestDayLegalOvertimeAmount($a, $rate, $per_day, $per_hour);
            $labels[] = new Payslip_Label('Rest Day Legal OT Amount', $restday_legal_ot_amount, 'restday_legal_ot_amount');
        $restday_legal_ns_ot_hours = G_Attendance_Helper::getTotalHolidayLegalRestDayNightShiftOvertimeHours($a);
            $labels[] = new Payslip_Label('Rest Day Legal NS OT Hours', $restday_legal_ns_ot_hours, 'restday_legal_ns_ot_hours');
        $restday_legal_ns_ot_amount = G_Payslip_Helper::computeRestDayLegalOvertimeNightShiftAmount($a, $rate, $per_day, $per_hour);
            $labels[] = new Payslip_Label('Rest Day Legal NS OT Amount', $restday_legal_ns_ot_amount, 'restday_legal_ns_ot_amount');
	
		// HOLIDAY SPECIAL
		$holiday_special_hours = G_Attendance_Helper::getTotalHolidaySpecialHours($a);//$hour->getHolidaySpecial();
			$labels[] = new Payslip_Label('Holiday Special Hours', $holiday_special_hours, 'holiday_special_hours');
		$holiday_special_amount = G_Payslip_Helper::computeSpecialAmount($a, $rate, $per_day, $per_hour);//$c->computeHolidaySpecial();
			$labels[] = new Payslip_Label('Holiday Special Amount', $holiday_special_amount, 'holiday_special_amount');			
		$holiday_special_ot_hours = G_Attendance_Helper::getTotalHolidaySpecialOvertimeHours($a);//$hour->getHolidaySpecialOvertime();
			$labels[] = new Payslip_Label('Holiday Special OT Hours', $holiday_special_ot_hours, 'holiday_special_ot_hours');			
		$holiday_special_ot_amount = G_Payslip_Helper::computeSpecialOvertimeAmount($a, $rate, $per_day, $per_hour);//$c->computeHolidaySpecialOvertime();
			$labels[] = new Payslip_Label('Holiday Special OT Amount', $holiday_special_ot_amount, 'holiday_special_ot_amount');
		//$holiday_special_ot_hours_excess = $hour->getHolidaySpecialOvertimeExcess();
		//	$labels[] = new Payslip_Label('Holiday Special OT Excess Hours', $holiday_special_ot_hours_excess, 'holiday_special_ot_hours_excess');
		//$holiday_special_ot_amount_excess = $c->computeHolidaySpecialOvertimeExcess();
		//	$labels[] = new Payslip_Label('Holiday Special OT Excess Amount', $holiday_special_ot_amount_excess, 'holiday_special_ot_amount_excess');
		//$holiday_special_ns_hours = $hour->getHolidaySpecialNightShift();
		//	$labels[] = new Payslip_Label('Holiday Special NS Hours', $holiday_special_ns_hours, 'holiday_special_ns_hours');
		//$holiday_special_ns_amount = $c->computeHolidaySpecialNightShift();
		//	$labels[] = new Payslip_Label('Holiday Special NS Amount', $holiday_special_nightshift_amount, 'holiday_special_nightshift_amount');
		$holiday_special_ns_ot_hours = G_Attendance_Helper::getTotalHolidaySpecialNightShiftOvertimeHours($a);
			$labels[] = new Payslip_Label('Holiday Special NS OT Hours', $holiday_special_ns_ot_hours, 'holiday_special_ns_ot_hours');
		$holiday_special_ns_ot_amount = G_Payslip_Helper::computeSpecialOvertimeNightShiftAmount($a, $rate, $per_day, $per_hour);
			$labels[] = new Payslip_Label('Holiday Special NS OT Amount', $holiday_special_ns_ot_amount, 'holiday_special_ns_ot_amount');
		//$holiday_special_ns_ot_hours_excess = $hour->getHolidaySpecialNightShiftOvertimeExcess();
		//	$labels[] = new Payslip_Label('Holiday Special NS OT Excess Hours', $holiday_special_ns_ot_hours_excess, 'holiday_special_ns_ot_hours_excess');
		//$holiday_special_ns_ot_amount_excess = $c->computeHolidaySpecialNightShiftOvertimeExcess();
		//	$labels[] = new Payslip_Label('Holiday Special NS OT Excess Amount', $holiday_special_ns_ot_amount_excess, 'holiday_special_ns_ot_amount_excess');

		//$holiday_special_restday_nightshift_hours = $hour->getHolidaySpecialRestdayNightShift();
		//	$labels[] = new Payslip_Label('Holiday Special Restday NS Hours', $holiday_special_restday_nightshift_hours, 'holiday_special_restday_nightshift_hours');
		//$holiday_special_restday_nightshift_amount = $c->computeHolidaySpecialRestDayNightShift();
		//	$labels[] = new Payslip_Label('Holiday Special Restday NS Amount', $holiday_special_restday_nightshift_amount, 'holiday_special_restday_nightshift_amount');
		
		// HOLIDAY LEGAL
		$holiday_legal_hours = G_Attendance_Helper::getTotalHolidayLegalHours($a);
			$labels[] = new Payslip_Label('Holiday Legal Hours', $holiday_legal_hours, 'holiday_legal_hours');
		$holiday_legal_amount = G_Payslip_Helper::computeLegalAmount($a, $rate, $per_day, $per_hour);//$c->computeHolidayLegal();
			$labels[] = new Payslip_Label('Holiday Legal Amount', $holiday_legal_amount, 'holiday_legal_amount');			
		$holiday_legal_ot_hours = G_Attendance_Helper::getTotalHolidayLegalOvertimeHours($a);//$hour->getHolidayLegalOvertime();
			$labels[] = new Payslip_Label('Holiday Legal OT Hours', $holiday_legal_ot_hours, 'holiday_legal_ot_hours');
		$holiday_legal_ot_amount = G_Payslip_Helper::computeLegalOvertimeAmount($a, $rate, $per_day, $per_hour);//$c->computeHolidayLegalOvertime();
			$labels[] = new Payslip_Label('Holiday Legal OT Amount', $holiday_legal_ot_amount, 'holiday_legal_ot_amount');	
		//$holiday_legal_ot_hours_excess = $hour->getHolidayLegalOvertimeExcess();
		//	$labels[] = new Payslip_Label('Holiday Legal OT Excess Hours', $holiday_legal_ot_hours_excess, 'holiday_legal_ot_hours_excess');
		//$holiday_legal_ot_amount_excess = $c->computeHolidayLegalOvertimeExcess();
		//	$labels[] = new Payslip_Label('Holiday Legal OT Excess Amount', $holiday_legal_ot_amount_excess, 'holiday_legal_ot_amount_excess');
		//$holiday_legal_ns_hours = $hour->getHolidaySpecialNightShift();
		//	$labels[] = new Payslip_Label('Holiday Legal NS Hours', $holiday_legal_ns_hours, 'holiday_legal_ns_hours');
		//$holiday_legal_ns_amount = $c->computeHolidayLegalNightShift();
		//	$labels[] = new Payslip_Label('Holiday Legal NS Amount', $holiday_legal_ns_amount, 'holiday_legal_ns_amount');
		$holiday_legal_ns_ot_hours = G_Attendance_Helper::getTotalHolidayLegalNightShiftOvertimeHours($a);//$hour->getHolidayLegalNightShiftOvertime();
			$labels[] = new Payslip_Label('Holiday Legal NS OT Hours', $holiday_legal_ns_ot_hours, 'holiday_legal_ns_ot_hours');
		$holiday_legal_ns_ot_amount = G_Payslip_Helper::computeLegalOvertimeNightShiftAmount($a, $rate, $per_day, $per_hour);//$c->computeHolidayLegalNightShiftOvertime();
			$labels[] = new Payslip_Label('Holiday Legal NS OT Amount', $holiday_legal_ns_ot_amount, 'holiday_legal_ns_ot_amount');
		//$holiday_legal_ns_ot_hours_excess = $hour->getHolidayLegalNightShiftOvertimeExcess();
		//	$labels[] = new Payslip_Label('Holiday Legal NS OT Excess Hours', $holiday_legal_ns_ot_hours_excess, 'holiday_legal_ns_ot_hours_excess');
		//$holiday_legal_ns_ot_amount_excess = $c->computeHolidayLegalNightShiftOvertimeExcess();
		//	$labels[] = new Payslip_Label('Holiday Legal NS OT Excess Amount', $holiday_legal_ns_ot_amount_excess, 'holiday_legal_ns_ot_amount_excess');
		//$holiday_legal_restday_hours = $hour->getHolidayLegalRestDay();
		//	$labels[] = new Payslip_Label('Holiday Legal Restday Hours', $holiday_legal_restday_hours, 'holiday_legal_restday_hours');
		//$holiday_legal_restday_amount = $c->computeHolidayLegalRestDay();
		//	$labels[] = new Payslip_Label('Holiday Legal Restday Amount', $holiday_legal_restday_amount, 'holiday_legal_restday_amount');
		//$holiday_legal_restday_ot_hours = $hour->getHolidayLegalRestDayOvertime();
		//	$labels[] = new Payslip_Label('Holiday Legal Restday OT Hours', $holiday_legal_restday_ot_hours, 'holiday_legal_restday_ot_hours');
		//$holiday_legal_restday_ot_amount = $c->computeHolidayLegalRestDayOvertime();
		//	$labels[] = new Payslip_Label('Holiday Legal Restday OT Amount', $holiday_legal_restday_ot_amount, 'holiday_legal_restday_ot_amount');
		//$holiday_legal_restday_nightshift_hours = $hour->getHolidayLegalRestdayNightShift();
		//	$labels[] = new Payslip_Label('Holiday Legal Restday NS Hours', $holiday_legal_restday_nightshift_hours, 'holiday_legal_restday_nightshift_hours');
		//$holiday_legal_restday_nightshift_amount = $c->computeHolidayLegalRestDayNightShift();
		//	$labels[] = new Payslip_Label('Holiday Legal Restday NS Amount', $holiday_legal_restday_nightshift_amount, 'holiday_legal_restday_nightshift_amount');


		//$total_overtime_amount = $c->computeTotalOvertime();
		//	$labels[] = new Payslip_Label('Total OT Amount', $total_overtime_amount, 'total_overtime_amount');
		//$total_nightshift_hours = $hour->getTotalNightShift();
		//	$labels[] = new Payslip_Label('Total NS Hours', $total_nightshift_hours, 'total_nightshift_hours');
		//$total_nightshift_amount = $c->computeTotalNightShift();
		//	$labels[] = new Payslip_Label('Total NS Amount', $total_nightshift_amount, 'total_nightshift_amount');
		
		switch ($salary_type):
			case G_Employee_Basic_Salary_History::SALARY_TYPE_MONTHLY:			
				if (Tools::isDateWithinDates($e->getHiredDate(), $start_date, $end_date)) { // pro rated
					$basic_pay = $present_days_with_pay * $salary_amount;					
				} else {
					$basic_pay = $salary_amount / 2;
				}
			break;
			case G_Employee_Basic_Salary_History::SALARY_TYPE_DAILY:
				$basic_pay = $present_days_with_pay * $salary_amount;
			break;		
		endswitch;	
											
		// EARNINGS
		$total_earnings = 0;

		$total_earnings += $basic_pay;
		$obj_earning = new Earning('Basic Pay', $basic_pay);
		$obj_earning->setVariable('basic_pay');
		$ers[] = $obj_earning;

        if ($regular_ot_amount > 0) {
            $total_earnings += $regular_ot_amount;
            $obj_earning = new Earning('Regular OT', $regular_ot_amount);
            $obj_earning->setVariable('total_regular_ot_amount');
            $ers[] = $obj_earning;
        }

        if ($regular_ns_ot_amount > 0) {
            $total_earnings += $regular_ns_ot_amount;
            $obj_earning = new Earning('Regular NS OT', $regular_ns_ot_amount);
            $obj_earning->setVariable('total_regular_ns_ot_amount');
            $ers[] = $obj_earning;
        }

        if ($holiday_special_amount > 0) {
            $total_earnings += $holiday_special_amount;
            $obj_earning = new Earning('Holiday Special', $holiday_special_amount);
            $obj_earning->setVariable('total_special_amount');
            $ers[] = $obj_earning;
        }

        if ($holiday_special_ot_amount > 0) {
            $total_earnings += $holiday_special_ot_amount;
            $obj_earning = new Earning('Holiday Special OT', $holiday_special_ot_amount);
            $obj_earning->setVariable('total_special_ot_amount');
            $ers[] = $obj_earning;
        }

        if ($holiday_special_ns_ot_amount > 0) {
            $total_earnings += $holiday_special_ns_ot_amount;
            $obj_earning = new Earning('Holiday Special NS OT', $holiday_special_ns_ot_amount);
            $obj_earning->setVariable('total_special_ns_ot_amount');
            $ers[] = $obj_earning;
        }

        if ($holiday_legal_amount > 0) {
            $total_earnings += $holiday_legal_amount;
            $obj_earning = new Earning('Holiday Legal', $holiday_legal_amount);
            $obj_earning->setVariable('total_legal_amount');
            $ers[] = $obj_earning;
        }

        if ($holiday_legal_ot_amount > 0) {
            $total_earnings += $holiday_legal_ot_amount;
            $obj_earning = new Earning('Holiday Legal OT', $holiday_legal_ot_amount);
            $obj_earning->setVariable('total_legal_ot_amount');
            $ers[] = $obj_earning;
        }

        if ($holiday_legal_ns_ot_amount > 0) {
            $total_earnings += $holiday_legal_ns_ot_amount;
            $obj_earning = new Earning('Holiday Legal NS OT', $holiday_legal_ns_ot_amount);
            $obj_earning->setVariable('total_legal_ns_ot_amount');
            $ers[] = $obj_earning;
        }

        if ($restday_amount > 0) {
            $total_earnings += $restday_amount;
            $obj_earning = new Earning('Rest Day', $restday_amount);
            $obj_earning->setVariable('total_rest_day');
            $ers[] = $obj_earning;
        }

        if ($restday_ot_amount > 0) {
            $total_earnings += $restday_ot_amount;
            $obj_earning = new Earning('Rest Day OT', $restday_ot_amount);
            $obj_earning->setVariable('total_rest_day_ot');
            $ers[] = $obj_earning;
        }

        if ($restday_ns_ot_amount > 0) {
            $total_earnings += $restday_ns_ot_amount;
            $obj_earning = new Earning('Rest Day NS OT', $restday_ns_ot_amount);
            $obj_earning->setVariable('total_rest_day_ns_ot');
            $ers[] = $obj_earning;
        }

        if ($restday_special_amount > 0) {
            $total_earnings += $restday_special_amount;
            $obj_earning = new Earning('Rest Day Special', $restday_special_amount);
            $obj_earning->setVariable('total_rest_day_special');
            $ers[] = $obj_earning;
        }

        if ($restday_special_ot_amount > 0) {
            $total_earnings += $restday_special_ot_amount;
            $obj_earning = new Earning('Rest Day Special OT', $restday_special_ot_amount);
            $obj_earning->setVariable('total_rest_day_special_ot');
            $ers[] = $obj_earning;
        }

        if ($restday_special_ns_ot_amount > 0) {
            $total_earnings += $restday_special_ns_ot_amount;
            $obj_earning = new Earning('Rest Day Special NS OT', $restday_special_ns_ot_amount);
            $obj_earning->setVariable('total_rest_day_special_ns_ot');
            $ers[] = $obj_earning;
        }

        if ($restday_legal_amount > 0) {
            $total_earnings += $restday_legal_amount;
            $obj_earning = new Earning('Rest Day Legal', $restday_legal_amount);
            $obj_earning->setVariable('total_rest_day_legal');
            $ers[] = $obj_earning;
        }

        if ($restday_legal_ot_amount > 0) {
            $total_earnings += $restday_legal_ot_amount;
            $obj_earning = new Earning('Rest Day Legal OT', $restday_legal_ot_amount);
            $obj_earning->setVariable('total_rest_day_legal_ot');
            $ers[] = $obj_earning;
        }

        if ($restday_legal_ns_ot_amount > 0) {
            $total_earnings += $restday_legal_ns_ot_amount;
            $obj_earning = new Earning('Rest Day Legal NS OT', $restday_legal_ns_ot_amount);
            $obj_earning->setVariable('total_rest_day_legal_ns_ot');
            $ers[] = $obj_earning;
        }

        //$p->addEarnings($ers);
		$p->setEarnings($ers);
		
		// DEDUCTIONS
		$total_deduction = 0;
		
		if ($is_first_period) {			
			$contri = G_Employee_Contribution_Finder::findCurrentContribution($e);
			
			//SSS
			if($contri){				
				$multiplier = G_Settings_Deduction_Breakdown_Helper::getCurrentPayPeriodPercentageDeductedByEmployeedAndDeductible($e,G_Settings_Deduction_Breakdown::SSS,$end_date);				
				$sss_amount = $contri->getSssEe();				
				$sss_amount = $sss_amount * ($multiplier / 100);
				
				$sss_ee = $sss_amount;
				$sss_er = $contri->getSssEr();
				$total_deductions += $sss_amount;
				$obj_deduct = new Deduction('SSS', $sss_amount);
				$obj_deduct->setVariable('sss');
				$deductions[] = $obj_deduct;
				$p->setSSS($sss_amount);
				$labels[] = new Payslip_Label('SSS Employer', $sss_er, 'sss_er');		
			}
			//05232013
			//$sss = G_SSS_Finder::findBySalary($salary_amount);						
			/*if ($sss) {					
			echo 333;
				$multiplier = G_Settings_Deduction_Breakdown_Helper::getCurrentPayPeriodPercentageDeductedByEmployeedAndDeductible($e,G_Settings_Deduction_Breakdown::SSS,$end_date);				
				$sss_amount = $sss->getEmployeeShare();
				
				$sss_amount = $sss_amount * ($multiplier / 100);
				
				$sss_ee = $sss_amount;
				$sss_er = $sss->getCompanyShare();
				$total_deductions += $sss_amount;
				$obj_deduct = new Deduction('SSS', $sss_amount);
				$obj_deduct->setVariable('sss');
				$deductions[] = $obj_deduct;
				$p->setSSS($sss_amount);
				$labels[] = new Payslip_Label('SSS Employer', $sss_er, 'sss_er');		
			}*/
			
			//Philhealth
			if ($contri) {
				$multiplier = G_Settings_Deduction_Breakdown_Helper::getCurrentPayPeriodPercentageDeductedByEmployeedAndDeductible($e,G_Settings_Deduction_Breakdown::PHIL_HEALTH,$end_date);				
				
				$phealth_amount = $contri->getPhilhealthEe();				
				$phealth_amount = $phealth_amount * ($multiplier / 100);				
				$phealth_er = $contri->getPhilhealthEr();
				$total_deductions += $phealth_amount;
				$obj_deduct = new Deduction('Philhealth', $phealth_amount);
				$obj_deduct->setVariable('philhealth');
				$deductions[] = $obj_deduct;
				$p->setPhilhealth($phealth_amount);
				$labels[] = new Payslip_Label('PHIC Employer', $phealth_er, 'philhealth_er');	
			}	
			//
			
			//05232013
			/*$phealth = G_Philhealth_Finder::findBySalary($salary_amount);
			if ($phealth) {
				$multiplier = G_Settings_Deduction_Breakdown_Helper::getCurrentPayPeriodPercentageDeductedByEmployeedAndDeductible($e,G_Settings_Deduction_Breakdown::PHIL_HEALTH,$end_date);				
				
				$phealth_amount = $phealth->getEmployeeShare();
				$phealth_amount = $phealth_amount * ($multiplies / 100);
				
				$phealth_er = $phealth->getCompanyShare();
				$total_deductions += $phealth_amount;
				$obj_deduct = new Deduction('Philhealth', $phealth_amount);
				$obj_deduct->setVariable('philhealth');
				$deductions[] = $obj_deduct;
				$p->setPhilhealth($phealth_amount);
				$labels[] = new Payslip_Label('PHIC Employer', $phealth_er, 'philhealth_er');	
			}*/
			
			//Pagibig
			if ($contri) {
				$multiplier = G_Settings_Deduction_Breakdown_Helper::getCurrentPayPeriodPercentageDeductedByEmployeedAndDeductible($e,G_Settings_Deduction_Breakdown::HDMF,$end_date);				
												
				$pagibig_amount = $contri->getPagibigEe();
				$pagibig_amount = $pagibig_amount * ($multiplier / 100);
				
				$pagibig_er = $contri->getPagibigEr();
				$total_deductions += $pagibig_amount;
				$obj_deduct = new Deduction('Pagibig', $pagibig_amount);
				$obj_deduct->setVariable('pagibig');
				$deductions[] = $obj_deduct;
				$p->setPagibig($pagibig_amount);	
				$labels[] = new Payslip_Label('Pagibig Employer', $pagibig_er, 'pagibig_er');		
			}
			//
			
			//05232013
			/*$pagibig = G_Pagibig_Finder::findBySalary($salary_amount);
			if ($pagibig) {
				$multiplier = G_Settings_Deduction_Breakdown_Helper::getCurrentPayPeriodPercentageDeductedByEmployeedAndDeductible($e,G_Settings_Deduction_Breakdown::PHIL_HEALTH,$end_date);				
												
				$pagibig_amount = $pagibig->getEmployeeShare();
				$pagibig_amount = $pagibig_amount * ($multiplier / 100);
				
				$pagibig_er = $pagibig->getCompanyShare();
				$total_deductions += $pagibig_amount;
				$obj_deduct = new Deduction('Pagibig', $pagibig_amount);
				$obj_deduct->setVariable('pagibig');
				$deductions[] = $obj_deduct;
				$p->setPagibig($pagibig_amount);	
				$labels[] = new Payslip_Label('Pagibig Employer', $pagibig_er, 'pagibig_er');		
			}*/
		}
		
		//EMPLOYEE DEDUCTIONS - LOANS
		/*$loan = G_Employee_Loan_Helper::generateEmployeeLoan($e,$start_date,$end_date);
		if($loan){			
			$total_deductions += $loan['total_amount'];
			$obj_deduct = new Deduction($loan['label'], $loan['total_amount']);
			$obj_deduct->setVariable('employee_deduction');
			$deductions[] = $obj_deduct;			
			$labels[] = new Payslip_Label($loan['label'], $loan['total_amount'], 'employee_deduction');		
			$p->setDeductions($deductions);	
		}*/
		//
		
		// BALANCES (MEDICAL, ID, UNIFORM)
//		$payments = G_Payment_Finder::findByEmployee($e);
//		if (count($payments) > 0) {
//			foreach ($payments as $payment) {
//				$total_amount = $payment->getTotalAmount();
//				$histories = $payment->getPaymentHistories();
//				$total_amount_paid = 0;
//				foreach ($histories as $history) {
//					$total_amount_paid += $history->getAmountPaid();	
//				}
//				if (strtolower($payment->getName()) == 'placement fee') {
//					$placement_fee = $salary_amount * 0.03 * $present_days;
//					$total_deductions += $placement_fee;
//					$obj_deduct = new Deduction('Placement Fee', $placement_fee);
//					$obj_deduct->setVariable('placement fee');
//					$deductions[] = $obj_deduct;	
//				} else if ($total_amount_paid < $total_amount) {
//					$partial_amount = $total_amount / 4;
//					$pb = new G_Payment_History;
//					$pb->setAmountPaid($partial_amount);
//					$pb->setDatePaid($end_date);
//					$payment->addPaymentHistory($pb);	
//					$payment->saveToEmployee($e);
//					
//					$total_deductions += $partial_amount;
//					$obj_deduct = new Deduction($payment->getName(), $partial_amount);
//					$obj_deduct->setVariable($payment->getName());
//					$deductions[] = $obj_deduct;				
//				}
//			}
//		}
		
		if ($late_amount > 0) {
			$total_deductions += $late_amount;
			$obj_deduct = new Deduction('Late', $late_amount);
			$obj_deduct->setVariable('late_amount');
			$deductions[] = $obj_deduct;
		}
		
		if ($undertime_amount > 0) {			
			$total_deductions += $undertime_amount;
			$obj_deduct = new Deduction('Undertime', $undertime_amount);
			$obj_deduct->setVariable('undertime_amount');
			$deductions[] = $obj_deduct;
		}
		
		if ($absent_amount > 0) {
			$total_deductions += $absent_amount;
			$obj_deduct = new Deduction('Absent Amount', $absent_amount);
			$obj_deduct->setVariable('absent_amount');
			$deductions[] = $obj_deduct;
		}
		
		if ($suspended_amount > 0) {
			$total_deductions += $suspended_amount;
			$obj_deduct = new Deduction('Suspended Amount', $suspended_amount);
			$obj_deduct->setVariable('suspended_amount');
			$deductions[] = $obj_deduct;
		}

// Gross pay formula of summit
//semi-monthly + 
//ns +
//reg ot +
//restday ot +
//holiday ot -
//late -
//undertime -
//absent - 
//suspension +
//other adjustment +
//holiday
		
		$gross_pay = $basic_pay + $total_overtime_amount + $total_nightshift_amount - ($late_amount + $undertime_amount + $absent_amount + $suspended_amount);			
		$month_13th = $basic_pay / 12; //($basic_pay - $late_amount - $absent_amount - $suspended_amount - $undertime_amount) / 12;		
		$taxable_income = $gross_pay - ($sss_amount + $phealth_amount + $pagibig_amount);
		
		$multiplier     = G_Settings_Deduction_Breakdown_Helper::getCurrentPayPeriodPercentageDeductedByEmployeedAndDeductible($e,G_Settings_Deduction_Breakdown::TAX,$end_date);				
		$taxable_income = $taxable_income * ($multiplier / 100);
		
		$pay_period_id = $s->getPayPeriodId();		
		$pay_period = G_Settings_Pay_Period_Finder::findById($pay_period_id);		
		if ($pay_period) {			
			if ($pay_period->getPayPeriodCode() == G_Settings_Pay_Period::TYPE_BI_MONTHLY) {
				$tax_table = Tax_Table_Factory::get(Tax_Table::SEMI_MONTHLY);
			} else if ($pay_period->getPayPeriodCode() == G_Settings_Pay_Period::TYPE_MONTHLY) {
				$tax_table = Tax_Table_Factory::get(Tax_Table::MONTHLY);
			}
			
			$tax = new Tax_Calculator;
			$tax->setTaxTable($tax_table);
			$tax->setTaxableIncome($taxable_income);
			if ($e->getNumberDependent() > 4) {			
				$dependents = 4;
			} else {
				$dependents	= $e->getNumberDependent();
			}
			$tax->setNumberOfDependent($dependents);
			$witholding_tax = $tax->compute();			
			
			if ($witholding_tax > 0) {
				$total_deductions += $witholding_tax;
				$obj_deduct = new Deduction('Witholding Tax', $witholding_tax);
				$obj_deduct->setVariable('witholding tax');
				$deductions[] = $obj_deduct;
			}
		}

		$net_pay = $total_earnings - $total_deductions;	
		
		//$p->addDeductions($deductions);		
		$p->setDeductions($deductions);
		//$p->addLabels($labels);				
		$p->setLabels($labels);
		
		$p->setBasicPay($basic_pay);
		$p->setGrossPay($gross_pay);
		$p->setNetPay($net_pay);
		$p->set13thMonth($month_13th);
		$p->setTaxable($taxable_income);
		$p->setSSS($sss_amount);
		$p->setPagibig($pagibig_amount);
		$p->setPhilhealth($phealth_amount);
		$p->setWithheldTax($witholding_tax);
		return $p;
	}
	
 	public static function getAllPayslipsByPeriodGroupByEmployee($from, $to) {		
		$sql = "
			SELECT e.id, p.period_start, p.period_end, p.payout_date, p.basic_pay, p.gross_pay, p.net_pay, p.earnings, p.other_earnings, p.deductions, p.other_deductions, p.labels,
					p.taxable, p.withheld_tax, p.month_13th, p.sss, p.pagibig, p.philhealth
			FROM
			 	(
					SELECT p2.id, p2.employee_id, p2.period_start, p2.period_end, p2.payout_date, p2.basic_pay, p2.gross_pay, p2.net_pay, p2.earnings, p2.other_earnings, p2.deductions, p2.other_deductions, p2.labels,
							p2.taxable, p2.withheld_tax, p2.month_13th, p2.sss, p2.pagibig, p2.philhealth
					FROM ". G_EMPLOYEE_PAYSLIP ." p2
					WHERE 
					( p2.period_start = ". Model::safeSql($from) ." AND p2.period_end = ". Model::safeSql($to) .")
					GROUP BY p2.employee_id
				) AS p
			INNER JOIN ". EMPLOYEE." e ON e.id = p.employee_id
			ORDER BY e.lastname
		";
		$result = Model::runSql($sql);
		while ($row = Model::fetchAssoc($result)) {
			$records[$row['id']] = $row;
		}	
		return $records;
	}
    /*
     * @param array $a Array instance of G_Attendance
     */
    public static function computeLegalAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $amount = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && $a->isHoliday()) {
                $h = $a->getHoliday();
                if ($h->isLegal()) {
                    $t = $a->getTimesheet();
                    $hours_worked = $t->getTotalHoursWorked();
                    if ($hours_worked >= 8) {
                        $hours_worked = 8;
                    }
                    if ($a->isOfficialBusiness()) {
                        $hours_worked = 8;
                    }
                    $holiday_legal_rate = $rate->getHolidayLegal();
                    $hours_worked = Tools::numberFormat($hours_worked, 2);
                    $temp_amount = (float) Tools::numberFormat($hours_worked * $hourly_amount * ($holiday_legal_rate/100), 2);
                    $amount = $amount + $temp_amount;
                }
            }
        }
        return $amount;
    }

    public static function computeLegalOvertimeAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $amount = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && $a->isHoliday()) {
                $h = $a->getHoliday();
                if ($h->isLegal()) {
                    $t = $a->getTimesheet();
                    $holiday_legal_ot_hours = $t->getLegalOvertimeHours() + $t->getLegalOvertimeExcessHours();
                    $holiday_legal_rate = $rate->getHolidayLegal();
                    $holiday_legal_ot_rate = $rate->getHolidayLegalOvertime();

                    $temp_amount = (float) Tools::numberFormat(($holiday_legal_ot_hours * ($hourly_amount * ($holiday_legal_rate/100))) * ($holiday_legal_ot_rate/100), 2);
                    $amount = $amount + $temp_amount;
                }
            }
        }
        return $amount;
    }

    /*
     * @param array $a Array instance of G_Attendance
     */
    public static function computeSpecialAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $amount = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && ($a->isHoliday())) {
                $h = $a->getHoliday();
                if ($h->isSpecial()) {
                    $t = $a->getTimesheet();
                    $hours_worked = $t->getTotalHoursWorked();
                    if ($hours_worked >= 8) {
                        $hours_worked = 8;
                    }
                    if ($a->isOfficialBusiness()) {
                        $hours_worked = 8;
                    }
                    $holiday_special_rate = $rate->getHolidaySpecial();
                    $hours_worked = Tools::numberFormat($hours_worked, 2);
                    $temp_amount = (float) Tools::numberFormat($hours_worked * $hourly_amount * ($holiday_special_rate/100), 2);
                    $amount = $amount + $temp_amount;
                }
            }
        }
        return $amount;
    }

    public static function computeRestDaySpecialAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $amount = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && $a->isHoliday() && $a->isRestday()) {
                $h = $a->getHoliday();
                if ($h->isSpecial()) {
                    $t = $a->getTimesheet();
                    $hours_worked = $t->getTotalHoursWorked();

                    if ($hours_worked >= 8) {
                        $hours_worked = 8;
                    }
                    if ($a->isOfficialBusiness()) {
                        $hours_worked = 8;
                    }

                    $holiday_special_rate = $rate->getHolidaySpecialRestday() / 100;
                    $hours_worked = (float) $hours_worked;
                    $hourly_amount = $hourly_amount * $holiday_special_rate;

                    $temp_amount = (float) Tools::numberFormat($hours_worked * $hourly_amount, 2);
                    $amount = $amount + $temp_amount;
                }
            }
        }
        return $amount;
    }

    public static function computeRestDayLegalAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $amount = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && $a->isHoliday() && $a->isRestday()) {
                $h = $a->getHoliday();
                if ($h->isLegal()) {
                    $t = $a->getTimesheet();
                    $hours_worked = $t->getTotalHoursWorked();

                    if ($hours_worked >= 8) {
                        $hours_worked = 8;
                    }
                    if ($a->isOfficialBusiness()) {
                        $hours_worked = 8;
                    }

                    $holiday_legal_rate = $rate->getHolidayLegalRestday() / 100;
                    $hours_worked = (float) $hours_worked;
                    $hourly_amount = $hourly_amount * $holiday_legal_rate;

                    $temp_amount = (float) Tools::numberFormat($hours_worked * $hourly_amount, 2);
                    $amount = $amount + $temp_amount;
                }
            }
        }
        return $amount;
    }

    public static function computeSpecialOvertimeAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $amount = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && $a->isHoliday()) {
                $h = $a->getHoliday();
                if ($h->isSpecial()) {
                    $t = $a->getTimesheet();
                    $holiday_special_ot_hours = $t->getSpecialOvertimeHours() + $t->getSpecialOvertimeExcessHours();
                    $holiday_special_rate = $rate->getHolidaySpecial();
                    $holiday_special_ot_rate = $rate->getHolidaySpecialOvertime();
                    $holiday_special_ot_hours = Tools::numberFormat($holiday_special_ot_hours, 2);
                    $temp_amount = (float) Tools::numberFormat(($holiday_special_ot_hours * ($hourly_amount * ($holiday_special_rate/100))) * ($holiday_special_ot_rate/100), 2);
                    $amount = $amount + $temp_amount;
                }
            }
        }
        return $amount;
    }

    public static function computeRestDaySpecialOvertimeAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $amount = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && $a->isHoliday() && $a->isRestday()) {
                $h = $a->getHoliday();
                if ($h->isSpecial()) {
                    $t = $a->getTimesheet();
                    $ot_hours = $t->getRestDaySpecialOvertimeHours() + $t->getRestDaySpecialOvertimeExcessHours();
                    $day_rate = $rate->getHolidaySpecialRestday() / 100;
                    $ot_rate = $rate->getHolidaySpecialRestdayOvertime() / 100;

                    $hourly_amount = $hourly_amount * $day_rate * $ot_rate;

                    $temp_amount = (float) Tools::numberFormat($ot_hours * $hourly_amount, 2);
                    $amount = $amount + $temp_amount;
                }
            }
        }
        return $amount;
    }

    public static function computeRestDayLegalOvertimeAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $amount = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && $a->isHoliday() && $a->isRestday()) {
                $h = $a->getHoliday();
                if ($h->isLegal()) {
                    $t = $a->getTimesheet();
                    $ot_hours = $t->getRestDayLegalOvertimeHours() + $t->getRestDayLegalOvertimeExcessHours();
                    $day_rate = $rate->getHolidayLegalRestday() / 100;
                    $ot_rate = $rate->getHolidayLegalRestdayOvertime() / 100;

                    $hourly_amount = $hourly_amount * $day_rate * $ot_rate;

                    $temp_amount = (float) Tools::numberFormat($ot_hours * $hourly_amount, 2);
                    $amount = $amount + $temp_amount;
                }
            }
        }
        return $amount;
    }

    public static function computeRestDaySpecialOvertimeNightShiftAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $amount = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && $a->isHoliday() && $a->isRestday()) {
                $h = $a->getHoliday();
                if ($h->isSpecial()) {
                    $t = $a->getTimesheet();
                    $ot_hours = $t->getRestDaySpecialOvertimeNightShiftHours() + $t->getRestDaySpecialOvertimeNightShiftExcessHours();

                    $day_rate = $rate->getHolidaySpecialRestday() / 100;
                    $ot_rate = $rate->getHolidaySpecialRestdayOvertime() / 100;
                    $ns_rate = ($rate->getNightShiftDiff() - 100) / 100;

                    $hourly_amount = $hourly_amount * $day_rate * $ot_rate;

                    $temp_amount = (float) Tools::numberFormat($ot_hours * $hourly_amount * $ns_rate, 2);
                    $amount = $amount + $temp_amount;
                }
            }
        }
        return $amount;
    }

    public static function computeRestDayLegalOvertimeNightShiftAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $amount = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && $a->isHoliday() && $a->isRestday()) {
                $h = $a->getHoliday();
                if ($h->isLegal()) {
                    $t = $a->getTimesheet();
                    $ot_hours = $t->getRestDayLegalOvertimeNightShiftHours() + $t->getRestDayLegalOvertimeNightShiftExcessHours();

                    $day_rate = $rate->getHolidayLegalRestday() / 100;
                    $ot_rate = $rate->getHolidayLegalRestdayOvertime() / 100;
                    $ns_rate = ($rate->getNightShiftDiff() - 100) / 100;

                    $hourly_amount = $hourly_amount * $day_rate * $ot_rate;

                    $temp_amount = (float) Tools::numberFormat($ot_hours * $hourly_amount * $ns_rate, 2);
                    $amount = $amount + $temp_amount;
                }
            }
        }
        return $amount;
    }

    public static function computeRestDayAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $amount = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && $a->isRestday() && !$a->isHoliday()) {
                $t = $a->getTimesheet();
                $restday_hours = $t->getTotalHoursWorked();
                if ($restday_hours > 8) {
                    $restday_hours = 8;
                }
                if ($a->isOfficialBusiness()) {
                    $restday_hours = 8;
                }
                $restday_rate = $rate->getRestDay();
                $restday_hours = Tools::numberFormat($restday_hours, 2);
                $temp_amount = (float) Tools::numberFormat($restday_hours * $hourly_amount * ($restday_rate/100), 2);
                $amount = $amount + $temp_amount;
            }
        }
        return $amount;
    }

    public static function computeRestDayOvertimeAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $amount = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && $a->isRestday() && !$a->isHoliday()) {
                $t = $a->getTimesheet();

                $rd_rate = $rate->getRestDay() / 100;
                $rd_ot_rate = $rate->getRestDayOvertime() / 100;

                $rd_ot_hours = $t->getRestDayOvertimeHours() + $t->getRestDayLegalOvertimeExcessHours();

                $temp_amount = (float) Tools::numberFormat(($rd_ot_hours * ($hourly_amount * $rd_rate)) * $rd_ot_rate, 2);
                $amount = $amount + $temp_amount;
            }
        }
        return $amount;
    }

    public static function computeRegularOvertimeAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $amount = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && !$a->isRestday() && !$a->isHoliday()) {
                $t = $a->getTimesheet();
                $ot_rate = $rate->getRegularOvertime() / 100;

                $ot_hours = $t->getRegularOvertimeHours() + $t->getRegularOvertimeExcessHours();
                $hourly_amount = $hourly_amount * $ot_rate;

                $temp_amount = (float) Tools::numberFormat($ot_hours * $hourly_amount, 2);
                $amount = $amount + $temp_amount;
            }
        }
        return $amount;
    }

    public static function computeRestDayOvertimeNightShiftAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $total = 0;
        foreach ($attendance as $a) {
            $t = $a->getTimesheet();
            if ($a->isPresent() && $a->isRestday() && !$a->isHoliday()) {
                if ($t) {
                    $rd_rate = $rate->getRestDay() / 100;
                    $ot_rate = $rate->getRestDayOvertime() / 100;
                    $ns_rate = ($rate->getNightShiftDiff() - 100) / 100;

                    $hourly_amount = ($hourly_amount * $rd_rate * $ot_rate);
                    $ot_hours = (float) $t->getRestDayOvertimeNightShiftHours() + $t->getRestDayOvertimeNightShiftExcessHours();

                    $temp_total = (float) Tools::numberFormat($ot_hours * $hourly_amount * $ns_rate , 2);
                    $total = $total + $temp_total;
                }
            }
        }
        return $total;
    }

    public static function computeRegularOvertimeNightShiftAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $total = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && !$a->isRestday() && !$a->isHoliday()) {
                $t = $a->getTimesheet();
                if ($t) {
                    $ot_rate = $rate->getRegularOvertime() / 100;
                    $ns_rate = ($rate->getNightShiftDiff() - 100) / 100;

                    $hourly_amount = ($hourly_amount * $ot_rate);
                    $ot_hours = (float) $t->getRegularOvertimeNightShiftHours() + $t->getRegularOvertimeNightShiftExcessHours();

                    $temp_total = (float) Tools::numberFormat($ot_hours * $hourly_amount * $ns_rate , 2);
                    $total = $total + $temp_total;
                }
            }
        }
        return $total;
    }

    public static function computeLegalOvertimeNightShiftAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $total = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && $a->isHoliday() && !$a->isRestday()) {
                $h = $a->getHoliday();
                if ($h && $h->isLegal()) {
                    $t = $a->getTimesheet();
                    if ($t) {
                        $day_rate = $rate->getHolidayLegal() / 100;
                        $ot_rate = $rate->getHolidayLegalOvertime() / 100;
                        $ns_rate = ($rate->getNightShiftDiff() - 100) / 100;

                        $hourly_amount = ($hourly_amount * $day_rate * $ot_rate);
                        $ot_hours = (float) $t->getLegalOvertimeNightShiftHours() + $t->getLegalOvertimeNightShiftExcessHours();

                        $temp_total = (float) Tools::numberFormat($ot_hours * $hourly_amount * $ns_rate , 2);
                        $total = $total + $temp_total;
                    }
                }
            }
        }
        return $total;
    }

    public static function computeSpecialOvertimeNightShiftAmount($attendance, $rate, $daily_amount, $hourly_amount) {
        $total = 0;
        foreach ($attendance as $a) {
            if ($a->isPresent() && $a->isHoliday() && !$a->isRestday()) {
                $h = $a->getHoliday();
                if ($h && $h->isSpecial()) {
                    $t = $a->getTimesheet();
                    if ($t) {
                        $day_rate = $rate->getHolidaySpecial() / 100;
                        $ot_rate = $rate->getHolidaySpecialOvertime() / 100;
                        $ns_rate = ($rate->getNightShiftDiff() - 100) / 100;

                        $hourly_amount = ($hourly_amount * $day_rate * $ot_rate);
                        $ot_hours = (float) $t->getSpecialOvertimeNightShiftHours() + $t->getSpecialOvertimeNightShiftExcessHours();

                        $temp_total = (float) Tools::numberFormat($ot_hours * $hourly_amount * $ns_rate , 2);
                        $total = $total + $temp_total;
                    }
                }
            }
        }
        return $total;
    }
}
?>