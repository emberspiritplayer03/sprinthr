<?php
/*
	Filtering duplicate raw timesheet data. It has multiple time in and out. This class gets the first time in and last time out for a certain day

	$timesheet[1]['in']['2012-07-27']['06:05:42'] = '2012-07-27';
	$timesheet[1]['in']['2012-07-27']['10:10:42'] = '2012-07-27';
	$timesheet[1]['in']['2012-07-27']['13:10:42'] = '2012-07-27';		
	$timesheet[1]['in']['2012-07-28']['06:05:42'] = '2012-07-28';
	$timesheet[1]['in']['2012-07-28']['06:10:42'] = '2012-07-28';
	$timesheet[1]['in']['2012-08-05']['06:05:42'] = '2012-08-05';		
	$timesheet[1]['out']['2012-07-27']['18:10:42'] = '2012-07-27';
	$timesheet[1]['out']['2012-07-27']['20:15:42'] = '2012-07-27';			
	$timesheet[1]['out']['2012-07-28']['19:10:42'] = '2012-07-28';		
	$timesheet[1]['out']['2012-08-05']['16:05:42'] = '2012-08-05';
	$timesheet[1]['out']['2012-08-05']['18:05:42'] = '2012-08-05';		
	$timesheet[2]['in']['2012-07-27']['06:05:42'] = '2012-07-27';
	$timesheet[2]['in']['2012-07-27']['10:10:42'] = '2012-07-27';
	$timesheet[2]['in']['2012-07-27']['13:10:42'] = '2012-07-27';		
	$timesheet[2]['in']['2012-07-28']['06:05:42'] = '2012-07-28';
	$timesheet[2]['in']['2012-07-28']['06:10:42'] = '2012-07-28';
	$timesheet[2]['in']['2012-08-05']['06:05:42'] = '2012-08-05';		
	$timesheet[2]['out']['2012-07-27']['18:10:42'] = '2012-07-27';
	$timesheet[2]['out']['2012-07-27']['20:15:42'] = '2012-07-27';			
	$timesheet[2]['out']['2012-07-28']['19:10:42'] = '2012-07-28';		
	$timesheet[2]['out']['2012-08-05']['16:05:42'] = '2012-08-05';
	$timesheet[2]['out']['2012-08-05']['18:05:42'] = '2012-08-05';	
	
	$tr = new G_Timesheet_Raw_Filter($timesheet);
	$x = $tr->filter();
	$tr->getErrorsNoOut();
	$tr->getErrorsNoIn();
*/
class G_Timesheet_Raw_Filter {
	protected $timesheets;
	protected $current_timesheet;
	protected $current_employee_id;
	protected $errors_no_out;
	protected $errors_no_in;
	
	protected $date_out_with_date_in;
	
	public function __construct($timesheets) {
		$this->timesheets = $timesheets;
	}
	
	public function filter() {
		$timesheets = $this->timesheets;		
		ksort($timesheets);
		foreach ($timesheets as $employee_id => $timesheet) {
			ksort($timesheet);
			$this->current_timesheet = $timesheet;
			$this->current_employee_id = $employee_id;
			$data = $this->getValidTimesheet($employee_id, false);
			if ($data) {
				$return[$employee_id] = $data;
			}
		}
		return $return;
	}
	
	public function filter_sub() {
		$timesheets = $this->timesheets;		
		ksort($timesheets);
		foreach ($timesheets as $employee_id => $timesheet) {
			ksort($timesheet);			
			$this->current_timesheet = $timesheet;
			$this->current_employee_id = $employee_id;
			$data = $this->getValidTimesheet($employee_id, false);
			if ($data) {
				$return[$employee_id] = $data;
			}
		}
		return $return;
	}
	
	public function filterAndAdd() {
		$timesheets = $this->timesheets;		
		ksort($timesheets);
		foreach ($timesheets as $employee_id => $timesheet) {
			ksort($timesheet);			
			$this->current_timesheet = $timesheet;			
			$this->current_employee_id = $employee_id;						
			$data = $this->getValidTimesheet($employee_id, true);			
			if ($data) {
				$return[$employee_id] = $data;
			}
		}
		return $return;
	}
	
	private function getValidTimesheet($employee_id, $is_add = false) {
		$ins = $this->getDateIns();		
		foreach ($ins as $date_in => $times) {
			if ($last_date_in) {
				
				$first_time = $this->getFirstTime($times);				
				$days = Tools::getDayDifference($last_date_in, $date_in);								
				$hours = Tools::computeHoursDifference($last_time, $first_time);								
				//echo "{$last_date_in} {$last_time} - {$date_in} {$first_time} = {$hours}";
				//echo '<br>';
				if (($hours <= 8) && $days <= 1 && $this->isNightShift($last_times) && $this->isMorning($times)) {
					continue;
				}
			}
			
			$date_time_out = $this->findDateOutAndTimeOut($date_in, $times);			
			if ($date_time_out) {
				//$time_in = $this->getFirstTime($times);
				$time_in = $date_time_out['time_in'];
				$date_out = $date_time_out['date_out'];
				$time_out = $date_time_out['time_out'];
				
				$return[$date_in]['in'] = "{$time_in} {$date_in}";
				$return[$date_in]['out'] = "{$time_out} {$date_out}";
				
				if ($is_add) {					
					$this->addTimesheet($employee_id, $date_in, $time_in, $date_out, $time_out);
					echo 2;					
				}
			} else {
				if ($employee_id) {
					$time_in = $this->getFirstTime($times);
					$this->addErrorNoOut($employee_id, $date_in, $time_in);
				}
			}			
			$last_time = $this->getLastTime($times);
			$last_times = $times;
			$last_date_in = $date_in;
		}
		return $return;		
	}
	
	private function findDateOutAndTimeOut($date_in, $time_ins) {
		$outs = $this->getDateOuts();
		$matched_date = '';
		foreach ($outs as $date_out => $time_outs) {
			$matched = $this->getMatchedDateOutAndTimeOut($date_in, $time_ins, $date_out, $time_outs);
			if ($matched) {
				$date['date_in'] = $matched['date_in'];
				$date['time_in'] = $matched['time_in'];
				$date['date_out'] = $matched['date_out'];
				$date['time_out'] = $matched['time_out'];

				if ($matched_date == '') {
					unset($this->errors_no_in[$this->current_employee_id][$date['date_out']]);
					$this->addDateOutWithDateIn($this->current_employee_id, $date['date_out'], $date['time_out']);
					$matched_date = $date;
				}
				//return $date;
			} else {
				if (!$this->isDateOutWithDateIn($this->current_employee_id, $date_out)) {
					$time_out = $this->getLastTime($time_outs);
					$this->addErrorNoIn($this->current_employee_id, $date_out, $time_out);
				}
			}
		}
		return $matched_date;
	}
	
	private function isDateOutWithDateIn($employee_id, $date_out) {
		if ($this->date_out_with_date_in[$employee_id][$date_out]) {
			return true;	
		} else {
			return false;	
		}
	}
	
	private function addDateOutWithDateIn($employee_id, $date, $time) {
		$this->date_out_with_date_in[$employee_id][$date] = $time;	
	}
	
	private function getMatchedDateOutAndTimeOut($date_in, $time_ins, $date_out, $time_outs) {
//		echo $date_in;
//		print_r($time_ins);
//		echo $date_out;
//		print_r($time_outs);
//		echo "<br>======<br>";
		$date_in_tomorrow = date('Y-m-d', strtotime($date_in . ' +1 day'));
		if (($date_in == $date_out && ($time_out = $this->getAfternoon($time_outs)))) {
			$date['date_in'] = $date_in;
			$date['time_in'] = $this->getFirstTime($time_ins);
			$date['date_out'] = $date_out;
			$date['time_out'] = $time_out;
			return $date;
		} else if ($date_in_tomorrow == $date_out && ($time_in = $this->getNightShift($time_ins)) && ($time_out = $this->getMorning($time_outs))) {
			$date['date_in'] = $date_in;
			$date['time_in'] = $time_in;
			$date['date_out'] = $date_out;
			$date['time_out'] = $time_out;
			return $date;
		} else if ($date_in_tomorrow == $date_out && ($time_out = $this->getMorning($time_outs))) {
			$date['date_in'] = $date_in;
			$date['time_in'] = $this->getFirstTime($time_ins);
			$date['date_out'] = $date_out;
			$date['time_out'] = $time_out;
			return $date;
		} else if ($date_in == $date_out) {
			$pm_time_in = $this->getAfternoon($time_ins);
			$pm_time_out = $this->getAfternoon($time_outs);
			$am_time_in = $this->getMorning($time_ins);
			$am_time_out = $this->getMorning($time_outs);
			if (($pm_time_in && $pm_time_out) || ($am_time_in && $am_time_out)) {
				$date['date_in'] = $date_in;
				$date['time_in'] = $this->getFirstTime($time_ins);
				$date['date_out'] = $date_out;
				$date['time_out'] = $this->getLastTime($time_outs);
				return $date;
			}
		} else {
			return false;
		}
	}	
	
	protected function addTimesheet($employee_code, $date_in, $time_in, $date_out, $time_out) {		
		$e = G_Employee_Finder::findByEmployeeCode($employee_code);	
		if ($e) {			
			$is_true = G_Attendance_Helper::recordTimecard($e, $date_in, $time_in, $time_out, $date_in, $date_out);
			if ($is_true) {				
				return G_Attendance_Helper::updateAttendance($e, $date_in);				
			}
		} //else {
			//$error = new G_Attendance_Error;			
			//$error->setMessage("Employee code can't find: {$employee_code}");
			//$error->setErrorTypeId(G_Attendance_Error::ERROR_INVALID_EMPLOYEE_ID);
			//$error->setDate($date_in);
			//$error->setEmployeeCode($employee_code);
			//$error->addError();
		//}
	}
	
	private function addErrorNoOut($employee_id, $date_in, $time_in) {
		$this->errors_no_out[$employee_id][$date_in] = $time_in;
	}
	
	public function getErrorsNoOut() {
		return $this->errors_no_out;	
	}
	
	private function addErrorNoIn($employee_id, $date_out, $time_out) {
		$this->errors_no_in[$employee_id][$date_out] = $time_out;
	}
	
	public function getErrorsNoIn() {
		return $this->errors_no_in;	
	}	
	
	private function getDateIns() {
		$ins = $this->current_timesheet['in'];
		ksort($ins);
		return $ins;
	}
	
	private function getDateOuts() {
		$outs = $this->current_timesheet['out'];
		ksort($outs);
		return $outs;
	}
	
	private function isMatchedDateOutAndTimeOut($date_in, $time_ins, $date_out, $time_outs) {
//		echo '<pre>';
//		echo "{$date_in}";		
//		print_r($time_ins);
//		echo $date_out;
//		print_r($time_outs);
//		echo '<br><br>';
		
		//$is_ns = $this->isNightShift($time_ins);
		$date_in_tomorrow = date('Y-m-d', strtotime($date_in . ' +1 day'));
		if (($date_in == $date_out && !$this->isMorning($time_outs))) {
			return true;
		} else if ($date_in_tomorrow == $date_out && $this->isNightShift($time_ins) && $this->isMorning($time_outs)) {
			return true;
		} else {
			return false;	
		}
	}
	
	private function getLastTime($times) {
		foreach ($times as $time => $date) {
			$last_time = $time;	
		}
		return $last_time;
	}
	
	private function getFirstTime($times) {
		foreach ($times as $time => $date) {
			$first_time = $time;
			return $first_time;
		}
	}	
	
	private function isNightShift($times) {
		$ns_time_start = strtotime('17:00:00');
		$ns_time_end = strtotime('23:59:00');
		$return = false;
		foreach ($times as $time => $date) {
			$time = strtotime($time);
			if ($time >= $ns_time_start && $time <= $ns_time_end) {
				$return = true;
			}
		}
		return $return;
	}
	
	private function getNightShift($times) {
		$ns_time_start = strtotime('17:00:00');
		$ns_time_end = strtotime('23:59:00');
		$ns_time = '';
		foreach ($times as $time => $date) {
			$mktime = strtotime($time);
			if ($mktime >= $ns_time_start && $mktime <= $ns_time_end) {
				$ns_time = $time;
				return $ns_time;
			}
		}
		return ($ns_time == '') ? false : true ;
	}	
	
	private function getMorning($times) {
		$time_start = strtotime('00:00:00');
		$time_end = strtotime('11:59:00');
		$morning_time = '';
		foreach ($times as $time => $date) {
			$mktime = strtotime($time);
			if ($mktime >= $time_start && $mktime <= $time_end) {
				$morning_time = $time;
			}
		}
		return ($morning_time == '') ? false : $morning_time ;
	}
	
	private function getAfternoon($times) {
		$time_start = strtotime('00:00:00');
		$time_end = strtotime('11:59:00');
		$afternoon_time = '';
		foreach ($times as $time => $date) {
			$mktime = strtotime($time);
			if ($mktime >= $time_start && $mktime <= $time_end) {
				//$afternoon_time = $time;
			} else {
				$afternoon_time = $time;
			}
		}
		return ($afternoon_time == '') ? false : $afternoon_time ;
	}			
	
	private function isMorning($times) {
		$time_start = strtotime('00:00:00');
		$time_end = strtotime('11:59:00');
		
		foreach ($times as $time => $date) {
			$time = strtotime($time);
			if ($time >= $time_start && $time <= $time_end) {
				return true;
			} else {
				return false;	
			}
		}
	}	
}
?>