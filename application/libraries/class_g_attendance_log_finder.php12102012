<?php
class G_Attendance_Log_Finder {
	
	public static function findAllWithMultipleLogsByPeriod($start_date, $end_date) {
		$sql = "
			SELECT a.id, a.user_id as employee_id, a.employee_code, a.employee_name, a.date, a.time, a.type
			FROM (
				SELECT b.employee_code, b.date, b.type
				FROM ". G_ATTENDANCE_LOG ." b
				WHERE b.date >= ". Model::safeSql($start_date) ."
				AND b.date <= ". Model::safeSql($end_date) ."
				GROUP BY b.employee_code, b.date, b.type
				HAVING count(*) > 1) x, ". G_ATTENDANCE_LOG ." a
			WHERE x.employee_code = a.employee_code
			AND x.date = a.date
			AND x.type = a.type
			AND a.date >= ". Model::safeSql($start_date) ."
			AND a.date <= ". Model::safeSql($end_date) ."
			ORDER BY a.employee_code, a.date, a.type	
		";
		return self::getRecords($sql);
	}
	
	public static function findAllWithoutOutLogsByPeriod($start_date, $end_date) {
		$logs = self::findAllByPeriod($start_date, $end_date);
		foreach ($logs as $l) {
			$timesheets[$l->getEmployeeCode()][$l->getType()][$l->getDate()][$l->getTime()] = $l->getDate();
			$ids[$l->getEmployeeCode()][$l->getDate().'-'.$l->getTime()] = $l->getId();
		}
		$tr = new G_Timesheet_Raw_Filter($timesheets);
		$tr->filter();
		$errors = $tr->getErrorsNoOut();
		//echo '<pre>';
		//print_r($errors);
		foreach ($errors as $employee_code => $timesheet) {
			foreach ($timesheet as $date => $time) {
				$log_id = $ids[$employee_code][$date .'-'. $time];
				$e = new G_Attendance_Log;
				$e->setId($log_id);
				$e->setEmployeeCode($employee_code);
				$e->setDate($date);
				$e->setTime($time);
				$e->setType('in');
				$data[$log_id] = $e;
			}
		}
		return $data;
	}
	
	public static function findAllWithoutInLogsByPeriod($start_date, $end_date) {
		$logs = self::findAllByPeriod($start_date, $end_date);
		foreach ($logs as $l) {
			$timesheets[$l->getEmployeeCode()][$l->getType()][$l->getDate()][$l->getTime()] = $l->getDate();
			$ids[$l->getEmployeeCode()][$l->getDate().'-'.$l->getTime()] = $l->getId();
		}
		$tr = new G_Timesheet_Raw_Filter($timesheets);
		$tr->filter();
		$errors = $tr->getErrorsNoIn();
		//echo '<pre>';
		//print_r($errors);		
		foreach ($errors as $employee_code => $timesheet) {
			foreach ($timesheet as $date => $time) {
				$log_id = $ids[$employee_code][$date .'-'. $time];
				$e = new G_Attendance_Log;
				$e->setId($log_id);
				$e->setEmployeeCode($employee_code);
				$e->setDate($date);
				$e->setTime($time);
				$e->setType('out');
				$data[$log_id] = $e;
			}
		}
		return $data;
	}
	
	public static function findByEmployeeCodeDateTimeType($employee_code, $date, $time, $type) {
		$sql = "
			SELECT id, user_id as employee_id, employee_code, employee_name, date, time, type
			FROM ". G_ATTENDANCE_LOG ."
			WHERE employee_code = ". Model::safeSql($employee_code) ."
			AND date = ". Model::safeSql($date) ."
			AND time = ". Model::safeSql($time) ."
			AND type = ". Model::safeSql($type) ."
			LIMIT 1
		";
		return self::getRecord($sql);
	}
	
	public static function findAllByPeriod($start_date, $end_date) {
		$sql = "
			SELECT id, user_id as employee_id, employee_code, employee_name, date, time, type
			FROM ". G_ATTENDANCE_LOG ."
			WHERE date >= ". Model::safeSql($start_date) ."
			AND date <= ". Model::safeSql($end_date) ."	
			ORDER BY date, time
		";
		return self::getRecords($sql);
	}
	
	public static function findAllYesterdayUntilNow() {
		$yesterday = date('Y-m-d', strtotime('yesterday'));
		$now = date('Y-m-d', strtotime('now'));
		$sql = "
			SELECT id, user_id as employee_id, employee_code, employee_name, date, time, type
			FROM ". G_ATTENDANCE_LOG ."
			WHERE date >= ". Model::safeSql($yesterday) ."
			AND date <= ". Model::safeSql($now) ."
			ORDER BY date, time
		";
		return self::getRecords($sql);
	}
	
	public static function findAllNow() {
		$date = date('Y-m-d', strtotime('now'));
		$sql = "
			SELECT id, user_id as employee_id, employee_code, employee_name, date, time, type
			FROM ". G_ATTENDANCE_LOG ."
			WHERE date >= ". Model::safeSql($date) ."
			ORDER BY date, time
		";
		return self::getRecords($sql);
	}	
	
	private static function getRecord($sql) {
		$result = Model::runSql($sql);
		$total = mysql_num_rows($result);
		if ($total == 0) {
			return false;	
		}		
		$row = Model::fetchAssoc($result);
		$records = self::newObject($row);	
		return $records;
	}
	
	private static function getRecords($sql) {
		$result = Model::runSql($sql);
		$total = mysql_num_rows($result);
		if ($total == 0) {
			return false;	
		}
		while ($row = Model::fetchAssoc($result)) {
			$records[$row['id']] = self::newObject($row);
		}
		return $records;
	}
	
	private static function newObject($row) {
		$e = new G_Attendance_Log;
		$e->setId($row['id']);
		$e->setEmployeeId($row['employee_id']);
		$e->setEmployeeCode($row['employee_code']);
		$e->setEmployeeName($row['employee_name']);
		$e->setDate($row['date']);
		$e->setTime($row['time']);
		$e->setType(strtolower($row['type']));
		return $e;
	}
}
?>