<?php
/*
	INSERT LOGS OR DTR TO DATABASE. 
	
	$timesheets[1]['2012-07-27']['20:05:42'] = '2012-07-27';
	$timesheets[1]['2012-07-27']['22:10:01'] = '2012-07-27';
	$timesheets[1]['2012-07-27']['01:15:02'] = '2012-07-27';	
	$timesheets[1]['2012-07-27']['03:30:03'] = '2012-07-27';
	$timesheets[1]['2012-07-28']['06:37:03'] = '2012-07-28';	
	$timesheets[2]['2012-07-27']['20:05:42'] = '2012-07-27';
	$timesheets[2]['2012-07-27']['22:10:01'] = '2012-07-27';
	$timesheets[2]['2012-07-27']['01:15:02'] = '2012-07-27';	
	$timesheets[2]['2012-07-27']['03:30:03'] = '2012-07-27';
	$timesheets[2]['2012-07-28']['06:37:03'] = '2012-07-28';
	
	$r = G_Timesheet_Raw_Logger($timesheets);
	$r->logTimesheet();
*/
class G_Timesheet_Raw_Logger {
	protected $raw_timesheets;
	protected $employee_id;
	protected $type; // in or out
	protected $date;
	protected $time;
	
	public function __construct($raw_timesheets) {
		$this->raw_timesheets = $raw_timesheets;
	}
	
	public function logTimesheet() {
		$timesheets = $this->raw_timesheets;
		
		ksort($timesheets);
		foreach ($timesheets as $employee_code => $timesheet) {
			ksort($timesheet);
			$ins  = $timesheet['in'];
			$outs = $timesheet['out'];
			$this->logIns($ins, $employee_code);
			$this->logOuts($outs, $employee_code);
		}
	}
	
	/*
		Array
		(
			[2012-09-16] => Array
				(
					[17:01:00] => 2012-09-16
				)
			[2012-09-17] => Array
				(
					[07:53:00] => 2012-09-17
				)
			[2012-09-18] => Array
				(
					[07:46:00] => 2012-09-18
				)
			[2012-09-19] => Array
				(
					[19:12:00] => 2012-09-19
				)
		)	
	*/
	
	private function logIns($ins, $employee_code) {
		foreach ($ins as $date => $time_date) {
			if (strtotime($date)) {
				foreach ($time_date as $time => $start_date) {
					if (strtotime($time) && strtotime($start_date)) {
						$final_start_date = date('Y-m-d', strtotime($start_date));
						$final_start_time = date('H:i:s', strtotime($time));						
						//$a = G_Attendance_Log_Finder::findByEmployeeCodeDateTimeType($employee_code, $final_start_date, $final_start_time, G_Attendance_Log::TYPE_IN);
						
						$total = G_Attendance_Log_Helper::countLogByEmployeeCodeDateTimeType($employee_code, $final_start_date, $final_start_time, G_Attendance_Log::TYPE_IN);
						
						if ($total == 0) {
							$a = new G_Attendance_Log;						
							$a->setEmployeeCode($employee_code);
							$a->setDate($final_start_date);
							$a->setTime($final_start_time);
							$a->setType(G_Attendance_Log::TYPE_IN);	
							$a->save();
						}
					}
				}
			}
		}
	}
	
	private function logOuts($outs, $employee_code) {
		foreach ($outs as $date => $time_date) {
			if (strtotime($date)) {
				foreach ($time_date as $time => $end_date) {
					if (strtotime($time) && strtotime($end_date)) {
						$final_end_date = date('Y-m-d', strtotime($end_date));
						$final_end_time = date('H:i:s', strtotime($time));
						//echo "<br/> Final Start Date{$final_end_date}} <br />";
						$total = G_Attendance_Log_Helper::countLogByEmployeeCodeDateTimeType($employee_code, $final_end_date, $final_end_time, G_Attendance_Log::TYPE_OUT);
						if ($total == 0) {
							$a = new G_Attendance_Log;						
							$a->setEmployeeCode($employee_code);
							$a->setDate($final_end_date);
							$a->setTime($final_end_time);
							$a->setType(G_Attendance_Log::TYPE_OUT);	
							$a->save();
						}
					}
				}
			}
		}
	}
}
?>