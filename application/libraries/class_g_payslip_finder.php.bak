<?php
class G_Payslip_Finder {
	
	public static function findById($id) {
		$sql = "
			SELECT id, payout_date, period_start, period_end, basic_pay, gross_pay, total_earnings, total_deductions, net_pay, earnings, other_earnings, deductions, other_deductions, labels,
				taxable, non_taxable, withheld_tax, month_13th, sss, pagibig, philhealth
			FROM g_employee_payslip
			WHERE id = ". Model::safeSql($id) ."			
			LIMIT 1			
		";
		return self::getObject($sql, $employee);
	}	
	
	public static function findAllByEmployeeAndPayoutDateRange(IEmployee $employee, $start_date, $end_date) {
		$sql = "
			SELECT id, payout_date, period_start, period_end, basic_pay, gross_pay, total_earnings, total_deductions, net_pay, earnings, other_earnings, deductions, other_deductions, labels,
				taxable, non_taxable, withheld_tax, month_13th, sss, pagibig, philhealth
			FROM g_employee_payslip
			WHERE employee_id = ". Model::safeSql($employee->getId()) ."
			AND (payout_date >= ". Model::safeSql($start_date) ." AND payout_date <= ". Model::safeSql($end_date) .")
			ORDER BY payout_date		
		";
		return self::getObjects($sql, $employee);
	}
		
	public static function findByEmployeeAndPayoutDate(IEmployee $employee, $payout_date) {
		$sql = "
			SELECT id, payout_date, period_start, period_end, basic_pay, gross_pay, total_earnings, total_deductions, net_pay, earnings, other_earnings, deductions, other_deductions, labels,
				taxable, non_taxable, withheld_tax, month_13th, sss, pagibig, philhealth
			FROM g_employee_payslip
			WHERE employee_id = ". Model::safeSql($employee->getId()) ."
			AND payout_date = ". Model::safeSql($payout_date) ."
			LIMIT 1			
		";
		return self::getObject($sql, $employee);
	}
		
	public static function findByEmployeeAndPeriod(IEmployee $employee, $start_date, $end_date) {
		$sql = "
			SELECT id, payout_date, period_start, period_end, basic_pay, gross_pay, total_earnings, total_deductions, net_pay, earnings, other_earnings, deductions, other_deductions, labels,
				taxable, non_taxable, withheld_tax, month_13th, sss, pagibig, philhealth
			FROM g_employee_payslip
			WHERE employee_id = ". Model::safeSql($employee->getId()) ."
			AND (period_start = ". Model::safeSql($start_date) ." AND period_end = ". Model::safeSql($end_date) .")
			LIMIT 1			
		";	
        		
		return 
		self::getObject($sql, $employee);
	}

	public static function findByEmployeeAndLastSalary(IEmployee $employee) {
		$sql = "
			SELECT id, payout_date, period_start, period_end, basic_pay, gross_pay, total_earnings, total_deductions, net_pay, earnings, other_earnings, deductions, other_deductions, labels,
				taxable, non_taxable, withheld_tax, month_13th, sss, pagibig, philhealth
			FROM g_employee_payslip
			WHERE employee_id = ". Model::safeSql($employee->getId()) ."
			AND basic_pay > 0
			ORDER by period_end DESC
			LIMIT 1			
		";
        		
		return self::getObject($sql, $employee);
	}

	public static function findByEmployeeLastSalaryByResignationDate(IEmployee $employee) {

		$resignation_date = $employee->getResignationDate();
		$cutoff 		  = G_Cutoff_Period_Finder::findByDate($resignation_date);
		$start_date 	  = $cutoff->getStartDate();
		$end_date   	  = $cutoff->getEndDate();		

		$sql = "
			SELECT id, payout_date, period_start, period_end, basic_pay, gross_pay, total_earnings, total_deductions, net_pay, earnings, other_earnings, deductions, other_deductions, labels,
				taxable, non_taxable, withheld_tax, month_13th, sss, pagibig, philhealth
			FROM g_employee_payslip
			WHERE employee_id = ". Model::safeSql($employee->getId()) ."
			AND (period_start = ". Model::safeSql($start_date) ." AND period_end = ". Model::safeSql($end_date) .")
			AND basic_pay > 0
			ORDER by period_end DESC
			LIMIT 1			
		";
        		
		return self::getObject($sql, $employee);
	}	
	
	public static function findByEmployeeAndDateRange(IEmployee $employee, $start_date, $end_date) {
		$sql = "
			SELECT id, payout_date, period_start, period_end, basic_pay, gross_pay, total_earnings, total_deductions, net_pay, earnings, other_earnings, deductions, other_deductions, labels,
				taxable, non_taxable, withheld_tax, month_13th, sss, pagibig, philhealth
			FROM g_employee_payslip
			WHERE (employee_id = ". Model::safeSql($employee->getId()) .")
			AND (period_start >= " . Model::safeSql($start_date) . " AND period_end <= " . Model::safeSql($end_date) . ")
			LIMIT 1			
		";	
			
		return self::getObject($sql, $employee);
	}
	
	public static function findByPeriod($start_date, $end_date) {
		$sql = "
			SELECT id, payout_date, period_start, period_end, basic_pay, gross_pay, total_earnings, total_deductions, net_pay, earnings, other_earnings, deductions, other_deductions, labels,
				taxable, non_taxable, withheld_tax, month_13th, sss, pagibig, philhealth
			FROM g_employee_payslip
			WHERE (period_start = ". Model::safeSql($start_date) ." AND period_end = ". Model::safeSql($end_date) .")		
		";		
		return self::getObjects($sql);
	}	

	public static function findAllByPeriod($start_date, $end_date, $fields) {
		$sql_fields = " * ";
		if( !empty($fields) ){
			$sql_fields = implode(",", $fields);
		}

		$sql = "
			SELECT {$sql_fields}
			FROM g_employee_payslip
			WHERE (period_end BETWEEN ". Model::safeSql($start_date) ." AND ". Model::safeSql($end_date) .")		
		";		
		
		return self::getObjects($sql);
	}

	public static function findAllByYear($year, $fields) {
		$sql_fields = " * ";
		if( !empty($fields) ){
			$sql_fields = implode(",", $fields);
		}

		$sql = "
			SELECT {$sql_fields}
			FROM g_employee_payslip
			WHERE DATE_FORMAT(period_end,'%Y')=" . Model::safeSql($year) . "
			ORDER BY employee_id ASC	
		";		
		
		return self::getObjects($sql);
	}

		public static function findAllByYearIn($year, $fields, $employee_id = '' ) {
		$sql_fields = " * ";
		if( !empty($fields) ){
			$sql_fields = implode(",", $fields);
		}

		// $sql_add_query = "";
		// if( !empty($employee_ids) ){
		// 	$string_employee_ids = implode(",", $employee_ids);
		// 	$sql_add_query = " AND employee_id IN({$string_employee_ids})";
		// }

		$sql = "
			SELECT *
			FROM g_employee_payslip
			WHERE DATE_FORMAT(period_end,'%Y')=" . Model::safeSql($year) . " AND employee_id = {$employee_id} 

		
		";		

		return self::getObjects($sql);
	}

		public static function findAllByYearAndEmpId($year, $fields,$emp_id = '') {
		$sql_fields = " * ";
		if( !empty($fields) ){
			$sql_fields = implode(",", $fields);
		}

		$sql = "
			SELECT {$sql_fields}
			FROM g_employee_payslip
			WHERE DATE_FORMAT(period_end,'%Y')=" . Model::safeSql($year) . "
			ORDER BY employee_id ASC	
		";		

		return self::getObjects($sql);
	}

	public static function findAllByYearWithOptions($year, $options, $fields) {
		$sql_fields = " p.* ";
		if( !empty($fields) ){
			$sql_fields = implode(",", $fields);
		}

		if( isset($options['add_query']) ){
			$sql_add_query = $options['add_query'];
		}
		
		$sql = "
			SELECT {$sql_fields}
			FROM g_employee_payslip p
				LEFT JOIN g_employee e ON p.employee_id = e.id
			WHERE DATE_FORMAT(p.period_end,'%Y')=" . Model::safeSql($year) . "
			{$sql_add_query}
			
				ORDER BY TRIM(e.lastname) ASC , TRIM(e.firstname) ASC
		";

		// echo $sql;
		// AND e.id = 23
		// AND p.id IN (35588,35635,35606,35563,35609,35612,35517,35472, 35637,35619,35607,35502,35533,35658)
		// 	ORDER BY p.employee_id ASC	
		//		AND p.id IN (35588,35635,35606,35563,35609,35612,35517,35472, 35637,35619,35607,35502,35533,35658)
		// SELECT p.* FROM g_employee_payslip p LEFT JOIN g_employee e ON p.employee_id = e.id WHERE DATE_FORMAT(p.period_end,'%Y')=2019 ORDER BY p.employee_id ASC

		 //AND  e.id IN ( 1, 4 )
		// 	AND e.id = 1
		// 	AND e.id = 23
		return self::getObjects($sql);
	}

	public static function findAllByCutOffWithOptions($cutoff_date, $options, $fields) {
		$sql_fields = " p.* ";
		if( !empty($fields) ){
			$sql_fields = implode(",", $fields);
		}

		if( isset($options['add_query']) ){
			$sql_add_query = $options['add_query'];
		}
		
		$sql = "
			SELECT {$sql_fields}
			
			FROM g_employee_payslip p
				LEFT JOIN g_employee e ON p.employee_id = e.id
			WHERE p.period_start =" . Model::safeSql($cutoff_date) . "
			{$sql_add_query}




			ORDER BY p.employee_id ASC	

		";

		// AND p.id IN (35588,35635,35606,35563,35609,35612,35517,35472, 35637,35619,35607,35502,35533,35658)
		// echo $sql;
		 // AND  e.id IN ( 1, 4 )
		// 	AND e.id = 1
		// 	AND e.id = 23
		return self::getObjects($sql);
	}

		public static function findAllByCutOffWithOptionsByEmployeeId($cutoff_date, $options, $fields=false,$emp_id) {
		$sql_fields = " p.* ";
		if( !empty($fields) ){
			$sql_fields = implode(",", $fields);
		}

		if( isset($options['add_query']) ){
			$sql_add_query = $options['add_query'];
		}
		
		$sql = "
			SELECT {$sql_fields}
			
			FROM g_employee_payslip p
				LEFT JOIN g_employee e ON p.employee_id = e.id
			WHERE p.period_start =" . Model::safeSql($cutoff_date) . "
			{$sql_add_query}

			AND e.id = {$emp_id}
		
			ORDER BY p.employee_id ASC	

		";
		//AND e.id = 12

		// 	AND  e.id IN ( 1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,61,62,64,66,67,68,69,70,71,72,73,74,76,77,80,81,82,83,84,86,87,88,89,90,91,92,93,94,96,97,98,101,105,106,108,109,110,111,113,114,118,120,121,124,126,127,128,129,130,132,134,135,138,139,140,141,142,143,146,147,148,149,150,151,152,154,155,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,173,175,176,177,179,183,185,189,204,324,535,536,537,538,541,542,545,546,547,548,549,551,554,555,557,558,559,560,562,563,564,568,569,570,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601 )
	
		// $sql = "SELECT  FROM g_employee_payslip p LEFT JOIN g_employee e ON p.employee_id = e.id WHERE p.period_start ='2018-12-26' AND e.id = 3 ORDER BY p.employee_id ASC 3";

		// echo $sql;
		//AND e.id = {$emp_id}
		 // AND  e.id IN ( 1, 4 )
		// 	AND e.id = 1
		// 	AND e.id = 23
		return self::getObjects($sql);
	}





	public static function findAllByYearWithOptionsCustomAddSelectedEmpAndRemoveJanuary($year, $options, $fields) {
		$sql_fields = " p.* ";
		if( !empty($fields) ){
			$sql_fields = implode(",", $fields);
		}

		if( isset($options['add_query']) ){
			$sql_add_query = $options['add_query'];
		}

		$employee_arr = array(20, 94, 3, 170, 69, 45, 324, 24, 14, 13, 171, 31, 29, 12, 5);
		$included_employee = '"' . implode('","', $employee_arr) . '"';
				
		$sql = "
			SELECT {$sql_fields}
			FROM g_employee_payslip p
				LEFT JOIN g_employee e ON p.employee_id = e.id
			WHERE DATE_FORMAT(p.period_end,'%Y')=" . Model::safeSql($year) . "
			AND DATE_FORMAT(p.period_start,'%m')!=" . Model::safeSql('01') . "
			AND p.employee_id IN ($included_employee)
			{$sql_add_query}
			ORDER BY p.employee_id ASC	
		";		

		//echo $sql;
		
		return self::getObjects($sql);
	}	

	public static function findAllByYearWithOptionsCustomRemoveSelectedEmp($year, $options, $fields) {
		$sql_fields = " p.* ";
		if( !empty($fields) ){
			$sql_fields = implode(",", $fields);
		}

		if( isset($options['add_query']) ){
			$sql_add_query = $options['add_query'];
		}

		$employee_arr = array(20, 94, 3, 170, 69, 45, 324, 24, 14, 13, 171, 31, 29, 12, 5);
		$included_employee = '"' . implode('","', $employee_arr) . '"';
				
		$sql = "
			SELECT {$sql_fields}
			FROM g_employee_payslip p
				LEFT JOIN g_employee e ON p.employee_id = e.id
			WHERE DATE_FORMAT(p.period_end,'%Y')=" . Model::safeSql($year) . "
			AND p.employee_id NOT IN ($included_employee)
			{$sql_add_query}
			ORDER BY p.employee_id ASC	
		";		
		
		//echo '<hr />';
		//echo $sql;
		
		return self::getObjects($sql);
	}		

	public static function findAllByYearAndEmployeeId($year, $employee_id = 0, $fields) {
		$sql_fields = " * ";
		if( !empty($fields) ){
			$sql_fields = implode(",", $fields);
		}

		$sql = "
			SELECT {$sql_fields}
			FROM g_employee_payslip
			WHERE DATE_FORMAT(period_end,'%Y')=" . Model::safeSql($year) . "
				AND employee_id =" . Model::safeSql($employee_id) . "	
		";		
		
		return self::getObjects($sql);
	}

	public static function findByEmployeeIdAndPeriod($employee_id, $start_date, $end_date) {
		$sql = "
			SELECT id, period_start, period_end, employee_id, labels 
			FROM g_employee_payslip
			WHERE employee_id = ". Model::safeSql($employee_id) ."
			AND (period_start = ". Model::safeSql($start_date) ." AND period_end = ". Model::safeSql($end_date) .")
			LIMIT 1			
		";	
	
		return 
		self::getObject($sql, $employee);
	}	

	public static function findByEmployeeIdAndCutoffPeriod($employee_id, $start_date, $end_date) {
		$sql = "
			SELECT id, payout_date, period_start, period_end, basic_pay, gross_pay, total_earnings, total_deductions, net_pay, earnings, other_earnings, deductions, other_deductions, labels,
				taxable, non_taxable, withheld_tax, month_13th, sss, pagibig, philhealth
			FROM g_employee_payslip
			WHERE employee_id = ". Model::safeSql($employee_id) ."			
			AND (period_start = ". Model::safeSql($start_date) ." AND period_end = ". Model::safeSql($end_date) .")
			LIMIT 1			
		";

		return self::getObject($sql, $employee);
	}
	
	private static function getObjects($sql, $employee) {
		$result = Model::runSql($sql);
		$total = mysql_num_rows($result);
		if ($total == 0) {
			return false;	
		}
		while ($row = Model::fetchAssoc($result)) {
			$return[$row['id']] = self::newObject($row, $employee);
		}		
		return $return;		
	}
	
	private static function getObject($sql, $employee) {
		$result = Model::runSql($sql);
		$row = Model::fetchAssoc($result);
		if (empty($row)) {
			return false;
		}
		return self::newObject($row, $employee);
	}
	
	private static function newObject($row, $employee) {
		$p = new G_Payslip;
		$p->setId($row['id']);
		$p->setEmployee($employee);
		$p->setPayoutDate($row['payout_date']);
		$p->setPeriod($row['period_start'], $row['period_end']);
		$earnings = ($row['earnings']) ? $p->addEarnings(unserialize($row['earnings'])) : '' ;
		$other_earnings = ($row['other_earnings']) ? $p->addOtherEarnings(unserialize($row['other_earnings'])) : '';
		$deductions = ($row['deductions']) ? $p->addDeductions(unserialize($row['deductions'])) : '';
		$other_deductions = ($row['other_deductions']) ? $p->addOtherDeductions(unserialize($row['other_deductions'])) : '';
		$labels = ($row['labels']) ? $p->addLabels(unserialize($row['labels'])) : '' ;
		
		$p->setEmployeeId($row['employee_id']);
		$p->setBasicPay($row['basic_pay']);
		$p->setGrossPay($row['gross_pay']);
        $p->setTotalEarnings($row['total_earnings']);
        $p->setTotalDeductions($row['total_deductions']);
		$p->setNetPay($row['net_pay']);
		$p->setTaxable($row['taxable']);
        $p->setNonTaxable($row['non_taxable']);
		$p->setWithheldTax($row['withheld_tax']);
		$p->set13thMonth($row['month_13th']);
		$p->setSSS($row['sss']);
		$p->setPagibig($row['pagibig']);
		$p->setPhilhealth($row['philhealth']);
		return $p;
	}
}
?>